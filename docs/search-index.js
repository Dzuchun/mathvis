var searchIndex = JSON.parse('{\
"convert_case":{"doc":"Converts to and from various cases.","t":"NNEINNDNNNNNNNNNNNNLLLLLLLLLLLLKLLLKLLLLLLLL","n":["Alternating","Camel","Case","Casing","Cobol","Flat","FromCasing","Kebab","Lower","Pascal","ScreamingSnake","Snake","Title","Toggle","Train","Upper","UpperCamel","UpperFlat","UpperSnake","all_cases","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","from","from_case","from_case","into","into","to_case","to_case","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"convert_case"],[44,"alloc::vec"],[45,"core::fmt"],[46,"core::fmt"],[47,"core::result"],[48,"core::any"]],"d":["Alternating case strings are delimited by spaces.  …","Camel case strings are lowercase, but for every word …","Defines the type of casing a string can be.","Describes items that can be converted into a case.","Cobol case strings are delimited by hyphens <code>-</code> and are all …","Flat case strings are all lowercase, with no delimiter.  …","Holds information about parsing before converting into a …","Kebab case strings are delimited by hyphens <code>-</code> and are all …","Lowercase strings are delimited by spaces and all …","Pascal case strings are lowercase, but for every word the …","Screaming snake case is an alternative name for upper …","Snake case strings are delimited by underscores <code>_</code> and are …","Title case strings are delimited by spaces. Only the …","Toggle case strings are delimited by spaces.  All …","Train case strings are delimited by hyphens <code>-</code>.  All …","Uppercase strings are delimited by spaces and all …","Upper camel case is an alternative name for Pascal case.","Upper flat case strings are all uppercase, with no …","Upper snake case strings are delimited by underscores <code>_</code> …","Returns a vector with all case enum variants.  This was …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>FromCasing</code> struct, which saves information about …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","References <code>self</code> and converts to the given case.","","","","","","","",""],"i":[1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,7,1,1,1,1,1,1,7,1,11,7,7,1,11,7,1,7,1,7,1,7,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],3,[],[]],[[1,1],4],[[-1,-2],4,[],[]],[[1,5],6],[-1,-1,[]],[-1,-1,[]],[[-1,1],7,[]],[[7,1],7],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],8,[]],[[7,1],8],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]]],"c":[],"p":[[4,"Case",0],[3,"Vec",44],[15,"tuple"],[15,"bool"],[3,"Formatter",45],[6,"Result",45],[3,"FromCasing",0],[3,"String",46],[4,"Result",47],[3,"TypeId",48],[8,"Casing",0]]},\
"derive_more":{"doc":"<code>derive_more</code>","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"mathvis":{"doc":"The name is <code>MathVis</code>. Stands for “Math Vision”","t":"AAADIDQGGIQDAKLLLLLLLLLLLKLLLLLLLLLLAKLLLLKLLLLLLLLLLEDDDNNNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNENNNNNENNNNNNEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLNNENNNLLLLLLLLFLLLL","n":["evaluation_tree","lexer","parser","Constant","Evaluatable","EvaluationTree","Input","Node","NodeRef","Operator","Res","Variable","args","args","args","args","args","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","eq","eq","evaluate","evaluate","evaluate","evaluate","from","from","from","from","from","from","from_tokens","functions","inner","into","into","into","new","operate","tr","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArgType","Args","ArgsErased","ArgsRefErased","Function","Function2","MissingEntry","MissingError","MissingValue","Variable","as_ref","assign_function","assign_function2","assign_variable","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","eq","eq","eq","eq","erased","erased_ref","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","functions","functions2","functions2_mut","functions_mut","get_function","get_function2","get_variable","into","into","into","into","into","merge","new","register_function","register_function2","register_variable","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unregister_function","unregister_function2","unregister_variable","variables","variables_mut","Functional","NamedFunction","args","args","args","borrow","borrow","borrow_mut","borrow_mut","evaluate","evaluate","evaluate","from","from","inner","into","into","new","new","operate","try_from","try_from","try_into","try_into","type_id","type_id","Braces","Brackets","Cap","Comma","Comma","Constant","GroupClose","GroupOpen","Grouping","GroupingType","Identifier","Identifier","ImaginaryUnit","Minus","Number","Operator","Operator","Operator","Parentheses","Plus","Slash","Star","Token","TokenType","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","lex","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","BadToken","Empty","GenerationError","NoToken","NomError","UnpairedGrouping","append","borrow","borrow_mut","fmt","fmt","from","from_error_kind","into","parse","to_string","try_from","try_into","type_id"],"q":[[0,"mathvis"],[3,"mathvis::evaluation_tree"],[53,"mathvis::evaluation_tree::args"],[134,"mathvis::evaluation_tree::functions"],[160,"mathvis::lexer"],[229,"mathvis::parser"],[248,"core::result"],[249,"num_complex"],[250,"alloc::string"],[251,"core::convert"],[252,"core::any"],[253,"core::convert"],[254,"core::fmt"],[255,"core::fmt"],[256,"num_complex"],[257,"nom::error"],[258,"nom::internal"],[259,"nom::error"]],"d":["This module defines <code>Evaluatable</code> trait as well as types …","This module defines lexer and structs relevant to it.","This module defines parser and relevant structs.","Basic type implementing <code>Evaluatable</code>. Requires no variables …","A trait, defining common interface for everything that can …","Represents parsed expression, ready to be evaluated.","Type of value inputted <em>into operator</em>","Commonly used type through a crate. Represents “tree node…","Commonly used type through a crate. Represents “tre node …","A trait defining common evaluatable behavior. Simplifies …","Type of the evaluation result.","Basic type implementing <code>Evaluatable</code>, having a name. …","This module defines <code>Args</code> object and all of the operations …","Retrieves arguments this object requires to be evaluated.","","","","","","","","","","","","Attempts to evaluate this object, possibly failing with …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Attempts to parse a tree from token slice. May fail with …","This module defines function-related objects that can be …","Retrieves reference to operator’s inner node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Operation over input value","“transposes” the value, swapping it’s real and …","","","","","","","","","","Represents types of arguments.","Represents argument list as well as their values during …","An erased form of <code>Args</code> that does not <code>Display</code> or <code>Eq</code> by …","An erased reference to <code>Args</code> that does not <code>Display</code> or <code>Eq</code> by …","","","","Represents error that had happened during evaluation.","","","","Assigns to a function with certain name (and registers it, …","Assigns to a function2 with certain name (and registers …","Assigns to a variable with certain name (and registers it, …","","","","","","","","","","","","","","","","Converts object into erased form.","Gets erased reference to an object.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets iterator over registered function names.","Gets iterator over registered function2 names.","Gets iterator over registered function2 names as well as …","Gets iterator over registered function names as well as …","Retrieves reference to a function. May fail with …","Retrieves reference to a function2. May fail with …","Retrieves reference to a value of variable. May fail with …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<strong>! THIS OPERATION IS NOT SYMMETRIC</strong>","Creates empty <code>Args</code> object.","Registers (but not assigns!) function with a certain name.","Registers (but not assigns!) function2 with a certain name.","Registers (but not assigns!) variable with a certain name.","","","","","","","","","","","","","","","","","","Unregisters function with a certain name, if present.","Unregisters function2 with a certain name, if present.","Unregisters variable with a certain name, if present.","Gets iterator over registered variable names.","Gets iterator over registered variable names as well as …","A defined function node, requires no additional definition.","Named function node, requires definition through <code>Args</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","{}","[]","","","","","","","","Represents type of grouping.","","","","","","Represents operators (not necessary corresponding to …","","","()","","","","Represents a single token.","Represents token type (used for debug)","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","lexes the input","","","","","","","","","","","","","","","","Unexpected token type encountered","There are no more tokens, but some were expected","Represents error occurred during tree generation.","Expected token was not found","Error emitted by <code>nom</code>","There’s an unpaired grouping","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","parses tokens into a node.","","","",""],"i":[0,0,0,0,0,0,39,0,0,0,10,0,0,10,2,3,4,2,3,4,2,3,4,3,4,10,2,3,4,9,2,3,3,3,4,2,0,39,2,3,4,4,39,3,2,3,4,2,3,4,2,3,4,0,0,0,0,25,25,6,0,6,25,19,1,1,1,19,24,25,6,1,19,24,25,6,1,1,19,24,25,6,1,1,19,24,25,25,6,6,19,24,25,6,1,1,1,1,1,1,1,1,19,24,25,6,1,1,1,1,1,1,25,6,19,24,25,6,1,19,24,25,6,1,19,24,25,6,1,1,1,1,1,1,0,0,31,29,29,31,29,31,29,31,29,29,31,29,31,31,29,31,29,31,31,29,31,29,31,29,32,32,33,12,34,34,12,12,34,0,12,34,12,33,12,0,12,34,32,33,33,33,0,0,32,33,12,34,32,33,12,34,32,33,32,33,32,33,12,34,32,33,12,34,34,32,33,12,34,32,33,12,34,0,32,33,34,32,33,12,34,32,33,12,34,32,33,12,34,14,14,0,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[2,1],[3,1],[4,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,3],5],[[4,4],5],[[-1,1],[[7,[6]]],[]],[[2,1],[[7,[6]]]],[[3,1],[[7,[8,6]]]],[[4,1],[[7,[8,6]]]],[-1,9,10],[-1,-1,[]],[-1,-1,[]],[11,3],[8,3],[-1,-1,[]],[[[13,[12]]],[[7,[2,14]]]],0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,4,[[17,[16]]]],[-1,8,[]],[3,3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,[19,1],[[1,-1,-2],20,[[22,[21]],[17,[16]]],23],[[1,-1,-2],20,[[22,[21]],[17,[16]]],23],[[1,-1,8],20,[[22,[21]],[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[19,19],5],[[24,24],5],[[25,25],5],[[6,6],5],[1,19],[1,24],[[19,26],27],[[24,26],27],[[25,26],27],[[25,26],27],[[6,26],27],[[6,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,[[0,[28]]]],[1,[[0,[28]]]],[1,[[0,[28]]]],[1,[[0,[28]]]],[[1,-1],[[7,[23,6]]],[[22,[21]],[17,[16]]]],[[1,-1],[[7,[23,6]]],[[22,[21]],[17,[16]]]],[[1,-1],[[7,[8,6]]],[[22,[21]],[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],20],[[],1],[[1,-1],20,[[17,[16]]]],[[1,-1],20,[[17,[16]]]],[[1,-1],20,[[17,[16]]]],[-1,16,[]],[-1,16,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[1,-1],20,[[22,[21]]]],[[1,-1],20,[[22,[21]]]],[[1,-1],20,[[22,[21]]]],[1,[[0,[28]]]],[1,[[0,[28]]]],0,0,[-1,1,[]],[[[29,[[20,[8,8]]]]],1],[[[29,[8]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1],[[7,[[30,[11]],6]]],[]],[[[29,[[20,[8,8]]]],1],[[7,[6]]]],[[[29,[8]],1],[[7,[6]]]],[-1,-1,[]],[-1,-1,[]],[[[31,[-1,-2]]],15,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-3],[[31,[-1,-2]]],[],[],[[17,[[9,[-2]]]]]],[[-1,-3],[[29,[-2]]],[[17,[16]]],[],[[17,[[9,[-2]]]]]],[[[31,[-1,-2]]],8,23,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[33,33],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[32,32],5],[[33,33],5],[[12,12],5],[[34,34],5],[[32,26],27],[[33,26],27],[[12,26],27],[[34,26],27],[[34,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[37,[21,[35,[12]],[36,[21]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,0,0,0,0,[[[13,[12]],38,14],14],[-1,-2,[],[]],[-1,-2,[],[]],[[14,26],27],[[14,26],27],[-1,-1,[]],[[[13,[12]],38],14],[-1,-2,[],[]],[[[13,[12]]],[[7,[[9,[8]],14]]]],[-1,16,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,18,[]]],"c":[],"p":[[3,"Args",53],[3,"EvaluationTree",3],[3,"Constant",3],[3,"Variable",3],[15,"bool"],[4,"MissingError",53],[4,"Result",248],[6,"Complex64",249],[6,"Node",3],[8,"Evaluatable",3],[15,"f64"],[4,"Token",160],[15,"slice"],[4,"GenerationError",229],[6,"NodeRef",3],[3,"String",250],[8,"Into",251],[3,"TypeId",252],[3,"ArgsErased",53],[15,"tuple"],[15,"str"],[8,"AsRef",251],[8,"Fn",253],[3,"ArgsRefErased",53],[4,"ArgType",53],[3,"Formatter",254],[6,"Result",254],[8,"IntoIterator",255],[3,"NamedFunction",134],[3,"Complex",249],[3,"Functional",134],[4,"GroupingType",160],[4,"Operator",160],[4,"TokenType",160],[3,"Vec",256],[3,"Error",257],[6,"IResult",258],[4,"ErrorKind",257],[8,"Operator",3]]},\
"memchr":{"doc":"This library provides heavily optimized routines for …","t":"DDDALLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFAFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLAAFFFFAAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIDLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLNDDDDDNELLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLLLLLLL","n":["Memchr","Memchr2","Memchr3","arch","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memmem","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","all","x86_64","is_equal","is_equal_raw","is_prefix","is_suffix","memchr","packedpair","rabinkarp","shiftor","twoway","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","iter","iter","iter","new","new","new","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","HeuristicFrequencyRank","Pair","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find_prefilter","fmt","fmt","from","from","index1","index2","into","into","new","new","pair","rank","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_indices","with_pair","with_ranker","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","find_raw","fmt","fmt","from","from","into","into","new","new","rfind","rfind_raw","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Finder","borrow","borrow_mut","find","fmt","from","into","new","try_from","try_into","type_id","Finder","FinderRev","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","find","fmt","fmt","from","from","into","into","new","new","rfind","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","avx2","sse2","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","memchr","packedpair","One","OneIter","Three","ThreeIter","Two","TwoIter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count_raw","find","find","find","find_raw","find_raw","find_raw","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_available","is_available","is_available","iter","iter","iter","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","next","next","next_back","next_back","next_back","rfind","rfind","rfind","rfind_raw","rfind_raw","rfind_raw","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Finder","borrow","borrow_mut","clone","clone_into","find","find_prefilter","fmt","from","into","is_available","min_haystack_len","new","pair","to_owned","try_from","try_into","type_id","with_pair","Auto","FindIter","FindRevIter","Finder","FinderBuilder","FinderRev","None","Prefilter","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_forward","build_forward_with_ranker","build_reverse","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","find","find","find_iter","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","needle","needle","new","new","new","next","next","prefilter","rfind","rfind","rfind_iter","rfind_iter","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"memchr"],[66,"memchr::arch"],[68,"memchr::arch::all"],[77,"memchr::arch::all::memchr"],[182,"memchr::arch::all::packedpair"],[217,"memchr::arch::all::rabinkarp"],[247,"memchr::arch::all::shiftor"],[258,"memchr::arch::all::twoway"],[286,"memchr::arch::x86_64"],[288,"memchr::arch::x86_64::avx2"],[290,"memchr::arch::x86_64::avx2::memchr"],[401,"memchr::arch::x86_64::avx2::packedpair"],[420,"memchr::arch::x86_64::sse2"],[422,"memchr::arch::x86_64::sse2::memchr"],[533,"memchr::arch::x86_64::sse2::packedpair"],[552,"memchr::memmem"],[650,"core::fmt"],[651,"core::fmt"],[652,"core::iter::adapters::rev"],[653,"core::result"],[654,"core::any"],[655,"core::marker"],[656,"core::convert"]],"d":["An iterator over all occurrences of a single byte in a …","An iterator over all occurrences of two possible bytes in …","An iterator over all occurrences of three possible bytes …","A module with low-level architecture dependent routines.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Search for the first occurrence of a byte in a slice.","Search for the first occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the first occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","This module provides forward and reverse substring search …","Search for the last occurrence of a byte in a slice.","Search for the last occurrence of two possible bytes in a …","Returns an iterator over all occurrences of the needles in …","Search for the last occurrence of three possible bytes in …","Returns an iterator over all occurrences of the needles in …","Returns an iterator over all occurrences of the needle in …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","","","","","","","","","","","","","","","","","","","","","","Contains architecture independent routines.","Vector algorithms for the <code>x86_64</code> target.","Compare corresponding bytes in <code>x</code> and <code>y</code> for equality.","Compare <code>n</code> bytes at the given pointers for equality.","Returns true if and only if <code>needle</code> is a prefix of <code>haystack</code>.","Returns true if and only if <code>needle</code> is a suffix of <code>haystack</code>.","Provides architecture independent implementations of <code>memchr</code>…","Provides an architecture independent implementation of the …","An implementation of the Rabin-Karp substring search …","An implementation of the Shift-Or substring search …","An implementation of the Two-Way substring search algorithm…","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of the needle in the given …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of one of the …","Returns an iterator over all occurrences of one of the …","Create a new searcher that finds occurrences of the byte …","Create a new searcher that finds occurrences of the two …","Create a new searcher that finds occurrences of the three …","","","","","","","Return the last occurrence of the needle in the given …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","An architecture independent “packed pair” finder.","This trait allows the user to customize the heuristic used …","A pair of byte offsets into a needle to use as a predicate.","","","","","","","","","Run this finder on the given haystack as a prefilter.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first offset of the pair.","Returns the second offset of the pair.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new prefilter that reports possible locations …","Create a new pair of offsets from the given needle.","Returns the pair of offsets (into the needle) used to …","Return the heuristic frequency rank of the given byte. A …","","","","","","","","","Create a new pair using the offsets given for the needle …","Create a new prefilter using the pair given.","Create a new pair of offsets from the given needle and …","A forward substring searcher using the Rabin-Karp …","A reverse substring searcher using the Rabin-Karp …","","","","","","","","","Return the first occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>find</code>, but accepts and returns raw pointers.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new Rabin-Karp forward searcher for the given …","Create a new Rabin-Karp reverse searcher for the given …","Return the last occurrence of the <code>needle</code> in the <code>haystack</code> …","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","A forward substring searcher using the Shift-Or algorithm.","","","Return the first occurrence of the needle given to …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new Shift-Or forward searcher for the given <code>needle</code>…","","","","A forward substring searcher that uses the Two-Way …","A reverse substring searcher that uses the Two-Way …","","","","","","","","","Returns the first occurrence of <code>needle</code> in the given …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a searcher that finds occurrences of the given …","Create a searcher that finds occurrences of the given …","Returns the last occurrence of <code>needle</code> in the given <code>haystack</code>…","","","","","","","","","Algorithms for the <code>x86_64</code> target using 256-bit vectors via …","Algorithms for the <code>x86_64</code> target using 128-bit vectors via …","This module defines 256-bit vector implementations of …","A 256-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","Create a new finder specific to AVX2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 256-bit vector …","","","","","Execute a search using AVX2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","This module defines 128-bit vector implementations of …","A 128-bit vector implementation of the “packed pair” …","Finds all occurrences of a single byte in a haystack.","An iterator over all occurrences of a single byte in a …","Finds all occurrences of three bytes in a haystack.","An iterator over all occurrences of three possible bytes …","Finds all occurrences of two bytes in a haystack.","An iterator over all occurrences of two possible bytes in …","","","","","","","","","","","","","","","","","","","","","","","","","Counts all occurrences of this byte in the given haystack.","","Counts all occurrences of this byte in the given haystack …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Return the first occurrence of one of the needle bytes in …","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","Like <code>find</code>, but accepts and returns raw pointers.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns true when this implementation is available in the …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Returns an iterator over all occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new searcher that finds occurrences of the needle …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","Create a new finder specific to SSE2 vectors and routines …","","","","","","","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Return the last occurrence of one of the needle bytes in …","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","Like <code>rfind</code>, but accepts and returns raw pointers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A “packed pair” finder that uses 128-bit vector …","","","","","Execute a search using SSE2 vectors and routines.","Run this finder on the given haystack as a prefilter.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true when this implementation is available in the …","Returns the minimum haystack length that this <code>Finder</code> can …","Create a new pair searcher. The searcher returned can …","Returns the pair of offsets (into the needle) used to …","","","","","Create a new “packed pair” finder using the pair of …","Automatically detect whether a heuristic prefilter should …","An iterator over non-overlapping substring matches.","An iterator over non-overlapping substring matches in …","A single substring searcher fixed to a particular needle.","A builder for constructing non-default forward or reverse …","A single substring reverse searcher fixed to a particular …","Never used a prefilter in substring search.","Prefilter controls whether heuristics are used to …","Convert this finder into its borrowed variant.","Convert this finder into its borrowed variant.","","","","","","","","","","","","","Build a forward finder using the given needle from the …","Build a forward finder using the given needle and a custom …","Build a reverse finder using the given needle from the …","","","","","","","","","","","Returns the index of the first occurrence of the given …","Returns the index of the first occurrence of this needle …","Returns an iterator over all non-overlapping occurrences …","Returns an iterator over all occurrences of a substring in …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert this iterator into its owned variant, such that it …","Convert this iterator into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Convert this finder into its owned variant, such that it …","Returns the needle that this finder searches for.","Returns the needle that this finder searches for.","Create a new finder for the given needle.","Create a new reverse finder for the given needle.","Create a new finder builder with default settings.","","","Configure the prefilter setting for the finder.","Returns the index of the last occurrence of the given …","Returns the index of the last occurrence of this needle in …","Returns a reverse iterator over all non-overlapping …","Returns a reverse iterator over all occurrences of a …","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,15,15,17,19,15,17,19,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,16,18,20,15,17,19,15,17,19,16,18,20,16,18,20,15,17,19,15,17,19,16,18,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,0,0,0,21,22,21,22,21,22,21,22,21,21,22,21,22,22,22,21,22,21,22,21,23,21,22,21,22,21,22,21,22,22,21,22,0,0,24,25,24,25,24,25,24,25,24,24,24,25,24,25,24,25,24,25,25,25,24,25,24,25,24,25,24,25,0,26,26,26,26,26,26,26,26,26,26,0,0,27,28,27,28,27,28,27,28,27,27,28,27,28,27,28,27,28,28,27,28,27,28,27,28,27,28,0,0,0,0,0,0,0,0,0,0,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,29,29,31,33,29,31,33,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,30,32,34,29,31,33,29,31,33,29,31,33,29,31,33,30,32,34,30,32,34,29,31,33,29,31,33,30,32,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,29,30,31,32,33,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,36,36,38,40,36,38,40,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,37,39,41,36,38,40,36,38,40,36,38,40,36,38,40,37,39,41,37,39,41,36,38,40,36,38,40,37,39,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,36,37,38,39,40,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,48,0,0,0,0,0,48,0,43,44,48,49,50,43,44,45,48,49,50,43,44,45,45,45,45,48,43,44,45,48,43,44,45,48,45,0,43,0,43,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,49,50,49,50,43,44,43,44,43,44,45,49,50,45,0,44,0,44,49,48,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45,48,49,50,43,44,45],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[1,5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],3],[[8,[9,[8]]],1],0,[[8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[10,[5]]]],[[8,8,[9,[8]]],[[11,[2]]]],[[8,8,8,[9,[8]]],[[10,[5]]]],[[8,8,8,[9,[8]]],[[11,[3]]]],[[8,[9,[8]]],[[11,[1]]]],[[8,[9,[8]]],1],[[8,8,[9,[8]]],2],[[8,8,8,[9,[8]]],3],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[10,[5]]]],[2,[[10,[5]]]],[3,[[10,[5]]]],[1,[[4,[5,[10,[5]]]]]],[2,[[4,[5,[10,[5]]]]]],[3,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,[[[9,[8]],[9,[8]]],14],[[8,8,5],14],[[[9,[8]],[9,[8]]],14],[[[9,[8]],[9,[8]]],14],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[15,[9,[8]]],5],[16,5],[[15,8,8],5],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[[15,6],7],[[16,6],7],[[17,6],7],[[18,6],7],[[19,6],7],[[20,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,[9,[8]]],16],[[17,[9,[8]]],18],[[19,[9,[8]]],20],[8,15],[[8,8],17],[[8,8,8],19],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[16,[[10,[5]]]],[18,[[10,[5]]]],[20,[[10,[5]]]],[[15,[9,[8]]],[[10,[5]]]],[[17,[9,[8]]],[[10,[5]]]],[[19,[9,[8]]],[[10,[5]]]],[[15,8,8],[[10,[8]]]],[[17,8,8],[[10,[8]]]],[[19,8,8],[[10,[8]]]],[16,[[4,[5,[10,[5]]]]]],[18,[[4,[5,[10,[5]]]]]],[20,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[22,22],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[21,[9,[8]]],[[10,[5]]]],[[21,6],7],[[22,6],7],[-1,-1,[]],[-1,-1,[]],[22,8],[22,8],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[21]]]],[[[9,[8]]],[[10,[22]]]],[21,22],[[-1,8],8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[[9,[8]],8,8],[[10,[22]]]],[[[9,[8]],22],[[10,[21]]]],[[[9,[8]],-1],[[10,[22]]],23],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[25,25],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[24,[9,[8]],[9,[8]]],[[10,[5]]]],[[24,8,8,8,8],[[10,[8]]]],[[24,6],7],[[25,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],24],[[[9,[8]]],25],[[25,[9,[8]],[9,[8]]],[[10,[5]]]],[[25,8,8,8,8],[[10,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[26,[9,[8]]],[[10,[5]]]],[[26,6],7],[-1,-1,[]],[-1,-2,[],[]],[[[9,[8]]],[[10,[26]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[27,[9,[8]],[9,[8]]],[[10,[5]]]],[[27,6],7],[[28,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[8]]],27],[[[9,[8]]],28],[[28,[9,[8]],[9,[8]]],[[10,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[29,[9,[8]]],5],[30,5],[[29,8,8],5],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[[29,6],7],[[30,6],7],[[31,6],7],[[32,6],7],[[33,6],7],[[34,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[29,[9,[8]]],30],[[31,[9,[8]]],32],[[33,[9,[8]]],34],[8,[[10,[29]]]],[[8,8],[[10,[31]]]],[[8,8,8],[[10,[33]]]],[8,29],[[8,8],31],[[8,8,8],33],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[30,[[10,[5]]]],[32,[[10,[5]]]],[34,[[10,[5]]]],[[29,[9,[8]]],[[10,[5]]]],[[31,[9,[8]]],[[10,[5]]]],[[33,[9,[8]]],[[10,[5]]]],[[29,8,8],[[10,[8]]]],[[31,8,8],[[10,[8]]]],[[33,8,8],[[10,[8]]]],[30,[[4,[5,[10,[5]]]]]],[32,[[4,[5,[10,[5]]]]]],[34,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],4,[],[]],[[35,[9,[8]],[9,[8]]],[[10,[5]]]],[[35,[9,[8]]],[[10,[5]]]],[[35,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[35,5],[[[9,[8]]],[[10,[35]]]],[35,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[35]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[36,[9,[8]]],5],[37,5],[[36,8,8],5],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[[36,6],7],[[37,6],7],[[38,6],7],[[39,6],7],[[40,6],7],[[41,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],14],[[],14],[[],14],[[36,[9,[8]]],37],[[38,[9,[8]]],39],[[40,[9,[8]]],41],[8,[[10,[36]]]],[[8,8],[[10,[38]]]],[[8,8,8],[[10,[40]]]],[8,36],[[8,8],38],[[8,8,8],40],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[37,[[10,[5]]]],[39,[[10,[5]]]],[41,[[10,[5]]]],[[36,[9,[8]]],[[10,[5]]]],[[38,[9,[8]]],[[10,[5]]]],[[40,[9,[8]]],[[10,[5]]]],[[36,8,8],[[10,[8]]]],[[38,8,8],[[10,[8]]]],[[40,8,8],[[10,[8]]]],[37,[[4,[5,[10,[5]]]]]],[39,[[4,[5,[10,[5]]]]]],[41,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[42,42],[[-1,-2],4,[],[]],[[42,[9,[8]],[9,[8]]],[[10,[5]]]],[[42,[9,[8]]],[[10,[5]]]],[[42,6],7],[-1,-1,[]],[-1,-2,[],[]],[[],14],[42,5],[[[9,[8]]],[[10,[42]]]],[42,22],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[[[9,[8]],22],[[10,[42]]]],0,0,0,0,0,0,0,0,[43,43],[44,44],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[45,-1],43,[46,[47,[[9,[8]]]]]],[[45,-1,-2],43,23,[46,[47,[[9,[8]]]]]],[[45,-1],44,[46,[47,[[9,[8]]]]]],[48,48],[43,43],[44,44],[45,45],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],48],[[],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[43,[9,[8]]],[[10,[5]]]],[[[9,[8]],-1],49,[46,[47,[[9,[8]]]]]],[[43,[9,[8]]],49],[[48,6],7],[[49,6],7],[[50,6],7],[[43,6],7],[[44,6],7],[[45,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[43,43],[44,44],[43,[[9,[8]]]],[44,[[9,[8]]]],[-1,43,[46,[47,[[9,[8]]]]]],[-1,44,[46,[47,[[9,[8]]]]]],[[],45],[49,[[10,[5]]]],[50,[[10,[5]]]],[[45,48],45],[[[9,[8]],[9,[8]]],[[10,[5]]]],[[44,-1],[[10,[5]]],[[47,[[9,[8]]]]]],[[[9,[8]],-1],50,[46,[47,[[9,[8]]]]]],[[44,[9,[8]]],50],[49,[[4,[5,[10,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[3,"Memchr",0],[3,"Memchr2",0],[3,"Memchr3",0],[15,"tuple"],[15,"usize"],[3,"Formatter",650],[6,"Result",650],[15,"u8"],[15,"slice"],[4,"Option",651],[3,"Rev",652],[4,"Result",653],[3,"TypeId",654],[15,"bool"],[3,"One",77],[3,"OneIter",77],[3,"Two",77],[3,"TwoIter",77],[3,"Three",77],[3,"ThreeIter",77],[3,"Finder",182],[3,"Pair",182],[8,"HeuristicFrequencyRank",182],[3,"Finder",217],[3,"FinderRev",217],[3,"Finder",247],[3,"Finder",258],[3,"FinderRev",258],[3,"One",290],[3,"OneIter",290],[3,"Two",290],[3,"TwoIter",290],[3,"Three",290],[3,"ThreeIter",290],[3,"Finder",401],[3,"One",422],[3,"OneIter",422],[3,"Two",422],[3,"TwoIter",422],[3,"Three",422],[3,"ThreeIter",422],[3,"Finder",533],[3,"Finder",552],[3,"FinderRev",552],[3,"FinderBuilder",552],[8,"Sized",655],[8,"AsRef",656],[4,"Prefilter",552],[3,"FindIter",552],[3,"FindRevIter",552]]},\
"minimal_lexical":{"doc":"Fast, minimal float-parsing algorithm.","t":"SSSSISSSSSSSSSSSSSSSSSLKKLLLFKK","n":["CARRY_MASK","DENORMAL_EXPONENT","EXPONENT_BIAS","EXPONENT_MASK","Float","HIDDEN_BIT_MASK","INFINITE_POWER","INVALID_FP","LARGEST_POWER_OF_TEN","MANTISSA_MASK","MANTISSA_SIZE","MAX_DIGITS","MAX_EXPONENT","MAX_EXPONENT_DISGUISED_FAST_PATH","MAX_EXPONENT_FAST_PATH","MAX_EXPONENT_ROUND_TO_EVEN","MAX_MANTISSA_FAST_PATH","MINIMUM_EXPONENT","MIN_EXPONENT_FAST_PATH","MIN_EXPONENT_ROUND_TO_EVEN","SIGN_MASK","SMALLEST_POWER_OF_TEN","exponent","from_bits","from_u64","int_pow_fast_path","is_denormal","mantissa","parse_float","pow_fast_path","to_bits"],"q":[[0,"minimal_lexical"],[31,"core::iter::traits::iterator"],[32,"core::clone"]],"d":["Mask to determine if a full-carry occurred (1 in bit above …","Exponent portion of a denormal float.","Bias of the exponet","Bitmask for the exponent, including the hidden bit.","Generic floating-point type, to be used in generic code …","Bitmask for the hidden bit in exponent, which is an …","","Bias for marking an invalid extended float.","Largest decimal exponent for a non-infinite value.","Bitmask for the mantissa (fraction), excluding the hidden …","Size of the significand (mantissa) without hidden bit.","Maximum number of digits that can contribute in the …","Maximum exponent value in float.","Maximum exponent that can be represented for a …","Maximum exponent that for a fast path case, or …","","","Minimum normal exponent value …","Minimum exponent that for a fast path case, or …","","Bitmask for the sign bit.","Smallest decimal exponent for a non-zero value.","Get exponent component from the float.","","Convert 64-bit integer to float.","Get a small, integral power-of-radix for fast-path …","Returns true if the float is a denormal.","Get mantissa (significand) component from float.","Parse float from extracted float components.","Get a small power-of-radix for fast-path multiplication.",""],"i":[8,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[2,-1,[]],[2,-1,[]],[[3,4],2],[-1,5,[]],[-1,2,[]],[[-1,-2,1],-3,[6,7],[6,7],8],[3,-1,[]],[-1,2,[]]],"c":[],"p":[[15,"i32"],[15,"u64"],[15,"usize"],[15,"u32"],[15,"bool"],[8,"Iterator",31],[8,"Clone",32],[8,"Float",0]]},\
"nom":{"doc":"nom, eating data byte by byte","t":"DDIIIEENNNIIQNIIIDIGNNIIIIDQQQQQDEINNDIINIINILLLLKKALLLLLLLLLLLLLLLLLLAAALLLLAKKKLLLLLLAOOKKKKLLLLLLLLLLLLLLLLKLLLLLLLLLLLKKKKLLKKKKALLLLLLALKAKLLKLLLLLLKKAKKLKKKKKKKKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLFFAAFFFFFFIIFKFKAAFFFFFFFFFFFFFFFFFFFFFFFFFFFFAFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFLLFFFFFFLFLFLFFFFFLFFFFFFFLLLFFNNNNNNNINNNNDENNNNNINNNNNNNNNNNNNNNNNNNNINNNNNNNNNNNNNNNNNNNDENLLKLLFLLLLLLLLLLLLLLMFLLLLFFLLLLLLFMLLLLLLLLLLLLKLLKLLLMLLLLFLLLLLLLLLLLLLLLLLLLAFFFFFFFFFFFFFFFFNENNLLLLALLLLLALLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFIFFKFFFF","n":["And","AndThen","AsBytes","AsChar","Compare","CompareResult","Err","Err","Error","Error","ErrorConvert","ExtendInto","Extender","Failure","FindSubstring","FindToken","Finish","FlatMap","HexDisplay","IResult","Incomplete","Incomplete","InputIter","InputLength","InputTake","InputTakeAtPosition","Into","Item","Item","Item","Iter","IterElem","Map","Needed","Offset","Ok","Ok","Or","ParseTo","Parser","Size","Slice","ToUsize","Unknown","UnspecializedInput","and","and","and_then","and_then","as_bytes","as_char","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","bytes","character","clone","clone","clone_into","clone_into","combinator","compare","compare_no_case","convert","convert","eq","eq","eq","equivalent","equivalent","error","error_node_position","error_position","extend_into","find_substring","find_token","finish","finish","flat_map","flat_map","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","input_len","into","into","into","into","into","into","into","into","into","into","into","is_alpha","is_alphanum","is_dec_digit","is_hex_digit","is_incomplete","is_known","is_oct_digit","iter_elements","iter_indices","len","lib","map","map","map","map","map_input","map_input","multi","new","new_builder","number","offset","or","or","parse","parse","parse","parse","parse","parse","parse","parse_to","position","sequence","slice","slice_index","source","split_at_position","split_at_position1","split_at_position1_complete","split_at_position_complete","take","take_split","to_hex","to_hex_from","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","bits","bytes","complete","streaming","bool","tag","take","bool","tag","take","Alt","Permutation","alt","choice","permutation","permutation","complete","streaming","escaped","escaped_transform","is_a","is_not","tag","tag_no_case","take","take_till","take_till1","take_until","take_until1","take_while","take_while1","take_while_m_n","escaped","escaped_transform","is_a","is_not","tag","tag_no_case","take","take_till","take_till1","take_until","take_until1","take_while","take_while1","take_while_m_n","complete","is_alphabetic","is_alphanumeric","is_digit","is_hex_digit","is_newline","is_oct_digit","is_space","streaming","alpha0","alpha1","alphanumeric0","alphanumeric1","anychar","char","crlf","digit0","digit1","hex_digit0","hex_digit1","i128","i16","i32","i64","i8","line_ending","multispace0","multispace1","newline","none_of","not_line_ending","oct_digit0","oct_digit1","one_of","satisfy","space0","space1","tab","u128","u16","u32","u64","u8","alpha0","alpha1","alphanumeric0","alphanumeric1","anychar","char","crlf","digit0","digit1","hex_digit0","hex_digit1","i128","i16","i32","i64","i8","line_ending","multispace0","multispace1","newline","none_of","not_line_ending","oct_digit0","oct_digit1","one_of","satisfy","space0","space1","tab","u128","u16","u32","u64","u8","ParserIterator","all_consuming","borrow","borrow_mut","complete","cond","consumed","cut","eof","fail","finish","flat_map","from","into","into","iterator","map","map_opt","map_parser","map_res","next","not","opt","peek","recognize","rest","rest_len","success","try_from","try_into","type_id","value","verify","Alpha","AlphaNumeric","Alt","Char","Char","Complete","Context","ContextError","Count","CrLf","Digit","Eof","Error","ErrorKind","Escaped","EscapedTransform","Fail","Fix","Float","FromExternalError","HexDigit","IsA","IsNot","LengthValue","LengthValueFn","Many0","Many0Count","Many1","Many1Count","ManyMN","ManyTill","MapOpt","MapRes","MultiSpace","Nom","NonEmpty","NoneOf","Not","OctDigit","OneOf","ParseError","Permutation","RegexpCapture","RegexpCaptures","RegexpFind","RegexpMatch","RegexpMatches","Satisfy","SeparatedList","SeparatedNonEmptyList","Space","Switch","Tag","TagBits","TagClosure","TakeTill1","TakeUntil","TakeWhile1","TakeWhileMN","TooLarge","VerboseError","VerboseErrorKind","Verify","add_context","add_context","append","append","append","append_error","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","code","context","convert","convert","convert","convert","convert_error","dbg_dmp","description","eq","eq","eq","eq","equivalent","error_to_u32","errors","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_char","from_char","from_error_kind","from_error_kind","from_error_kind","from_external_error","from_external_error","from_external_error","hash","input","into","into","into","into","make_error","new","or","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","std","count","fill","fold_many0","fold_many1","fold_many_m_n","length_count","length_data","length_value","many0","many0_count","many1","many1_count","many_m_n","many_till","separated_list0","separated_list1","Big","Endianness","Little","Native","borrow","borrow_mut","clone","clone_into","complete","eq","equivalent","fmt","from","into","streaming","to_owned","try_from","try_into","type_id","be_f32","be_f64","be_i128","be_i16","be_i24","be_i32","be_i64","be_i8","be_u128","be_u16","be_u24","be_u32","be_u64","be_u8","double","f32","f64","float","hex_u32","i128","i16","i24","i32","i64","i8","le_f32","le_f64","le_i128","le_i16","le_i24","le_i32","le_i64","le_i8","le_u128","le_u16","le_u24","le_u32","le_u64","le_u8","recognize_float","recognize_float_parts","u128","u16","u24","u32","u64","u8","be_f32","be_f64","be_i128","be_i16","be_i24","be_i32","be_i64","be_i8","be_u128","be_u16","be_u24","be_u32","be_u64","be_u8","double","f32","f64","float","hex_u32","i128","i16","i24","i32","i64","i8","le_f32","le_f64","le_i128","le_i16","le_i24","le_i32","le_i64","le_i8","le_u128","le_u16","le_u24","le_u32","le_u64","le_u8","recognize_float","recognize_float_parts","u128","u16","u24","u32","u64","u8","Tuple","delimited","pair","parse","preceded","separated_pair","terminated","tuple"],"q":[[0,"nom"],[202,"nom::bits"],[206,"nom::bits::complete"],[209,"nom::bits::streaming"],[212,"nom::branch"],[218,"nom::bytes"],[220,"nom::bytes::complete"],[234,"nom::bytes::streaming"],[248,"nom::character"],[257,"nom::character::complete"],[291,"nom::character::streaming"],[325,"nom::combinator"],[358,"nom::error"],[501,"nom::lib"],[502,"nom::multi"],[518,"nom::number"],[537,"nom::number::complete"],[584,"nom::number::streaming"],[631,"nom::sequence"],[639,"core::marker"],[640,"core::clone"],[641,"core::convert"],[642,"core::cmp"],[643,"core::option"],[644,"core::result"],[645,"core::ops::function"],[646,"core::fmt"],[647,"core::fmt"],[648,"alloc::string"],[649,"alloc::vec"],[650,"core::any"],[651,"core::ops::range"],[652,"core::ops::arith"],[653,"core::ops::bit"],[654,"core::ops::bit"],[655,"core::ops::deref"],[656,"core::fmt"]],"d":["Implementation of <code>Parser::and</code>","Implementation of <code>Parser::and_then</code>","Helper trait for types that can be viewed as a byte slice","Transforms common types to a char for basic token parsing","Abstracts comparison operations","Indicates whether a comparison was successful, an error, or","The <code>Err</code> enum indicates the parser was not successful","Contains the error value","The parser had an error (recoverable)","Comparison failed","Equivalent From implementation to avoid orphan rules in …","Abstracts something which can extend an <code>Extend</code>. Used to …","The type that will be produced","The parser had an unrecoverable error: we got to the right …","Look for a substring in self","Look for a token in self","Helper trait to convert a parser’s result to a more …","Implementation of <code>Parser::flat_map</code>","Helper trait to show a byte slice as a hex dump","Holds the result of parsing functions","There was not enough data","We need more data to be sure","Abstracts common iteration operations on the input type","Abstract method to calculate the input length","Abstracts slicing operations","Methods to take as much input as possible until the …","Implementation of <code>Parser::into</code>","The current input type is a sequence of that <code>Item</code> type.","The current input type is a sequence of that <code>Item</code> type.","The current input type is a sequence of that <code>Item</code> type.","An iterator over the input type, producing the item and …","An iterator over the input type, producing the item","Implementation of <code>Parser::map</code>","Contains information on needed data if a parser returned …","Useful functions to calculate the offset between slices …","Contains the success value","Comparison was successful","Implementation of <code>Parser::or</code>","Used to integrate <code>str</code>’s <code>parse()</code> method","All nom parsers implement this trait","Contains the required data size in bytes","Slicing operations using ranges.","Helper trait to convert numbers to usize.","Needs more data, but we do not know how much","Dummy trait used for default implementations (currently …","Applies a second parser after the first one, return their …","Applies a second parser after the first one, return their …","Applies a second parser over the output of the first one","Applies a second parser over the output of the first one","Casts the input type to a byte slice","makes a char from self","Bit level parsers","","","","","","","","","","","","","","","","","","","Choice combinators","Parsers recognizing bytes streams","Character specific parsers and combinators","","","","","General purpose combinators","Compares self to another value for equality","Compares self to another value for equality independently …","Transform to another error type","Automatically converts between errors if the underlying …","","","","","","Error management","Creates a parse error from a <code>nom::ErrorKind</code>, the position …","Creates a parse error from a <code>nom::ErrorKind</code> and the …","Accumulate the input into an accumulator","Returns the byte position of the substring if it is found","Returns true if self contains the token","converts the parser’s result to a type that is more …","","Creates a second parser from the output of the first one, …","Creates a second parser from the output of the first one, …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the input length, as indicated by its name, and …","automatically converts the parser’s output and error …","automatically converts the parser’s output and error …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Tests that self is an alphabetic character","Tests that self is an alphabetic character or a decimal …","Tests that self is a decimal digit","Tests that self is an hex digit","Tests if the result is Incomplete","Indicates if we know how many bytes we need","Tests that self is an octal digit","Returns an iterator over the elements","Returns an iterator over the elements and their byte …","Gets the len in bytes for self","Lib module to re-export everything needed from <code>std</code> or <code>core</code>/…","Maps a function over the result of a parser","Maps a function over the result of a parser","Maps a <code>Needed</code> to <code>Needed</code> by applying a function to a …","Applies the given function to the inner error","Maps <code>Err&lt;(T, ErrorKind)&gt;</code> to <code>Err&lt;(U, ErrorKind)&gt;</code> with the …","Maps <code>Err&lt;error::Error&lt;T&gt;&gt;</code> to <code>Err&lt;error::Error&lt;U&gt;&gt;</code> with the …","Combinators applying their child parser multiple times","Creates <code>Needed</code> instance, returns <code>Needed::Unknown</code> if the …","Create a new <code>Extend</code> of the correct type","Parsers recognizing numbers","Offset between the first byte of self and the first byte …","Applies a second parser over the input if the first one …","Applies a second parser over the input if the first one …","A parser takes in input type, and returns a <code>Result</code> …","","","","","","","Succeeds if <code>parse()</code> succeeded. The byte slice …","Finds the byte position of the element","Combinators applying parsers in sequence","Slices self according to the range argument","Get the byte offset from the element’s position in the …","","Looks for the first element of the input type for which …","Looks for the first element of the input type for which …","Looks for the first element of the input type for which …","Looks for the first element of the input type for which …","Returns a slice of <code>count</code> bytes. panics if count &gt; length","Split the stream at the <code>count</code> byte offset. panics if count …","Converts the value of <code>self</code> to a hex dump, returning the …","Converts the value of <code>self</code> to a hex dump beginning at <code>from</code> …","","Obtaining ownership","Obtaining ownership","Obtaining ownership","Obtaining ownership","","","converts self to usize","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a byte-level input to a bit-level input, for …","Counterpart to <code>bits</code>, <code>bytes</code> transforms its bit stream input …","Bit level parsers","Bit level parsers","Parses one specific bit as a bool.","Generates a parser taking <code>count</code> bits and comparing them to …","Generates a parser taking <code>count</code> bits","Parses one specific bit as a bool.","Generates a parser taking <code>count</code> bits and comparing them to …","Generates a parser taking <code>count</code> bits","Helper trait for the alt() combinator.","Helper trait for the permutation() combinator.","Tests a list of parsers one by one until one succeeds.","Tests each parser in the tuple and returns the result of …","Applies a list of parsers in any order.","Tries to apply all parsers in the tuple in various orders …","Parsers recognizing bytes streams, complete input version","Parsers recognizing bytes streams, streaming version","Matches a byte string with escaped characters.","Matches a byte string with escaped characters.","Returns the longest slice of the matches the pattern.","Parse till certain characters are met.","Recognizes a pattern","Recognizes a case insensitive pattern.","Returns an input slice containing the first N input …","Returns the longest input slice (if any) till a predicate …","Returns the longest (at least 1) input slice till a …","Returns the input slice up to the first occurrence of the …","Returns the non empty input slice up to the first …","Returns the longest input slice (if any) that matches the …","Returns the longest (at least 1) input slice that matches …","Returns the longest (m &lt;= len &lt;= n) input slice  that …","Matches a byte string with escaped characters.","Matches a byte string with escaped characters.","Returns the longest slice of the matches the pattern.","Parse till certain characters are met.","Recognizes a pattern.","Recognizes a case insensitive pattern.","Returns an input slice containing the first N input …","Returns the longest input slice (if any) till a predicate …","Returns the longest (at least 1) input slice till a …","Returns the input slice up to the first occurrence of the …","Returns the non empty input slice up to the first …","Returns the longest input slice (if any) that matches the …","Returns the longest (at least 1) input slice that matches …","Returns the longest (m &lt;= len &lt;= n) input slice  that …","Character specific parsers and combinators, complete input …","Tests if byte is ASCII alphabetic: A-Z, a-z","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9","Tests if byte is ASCII digit: 0-9","Tests if byte is ASCII hex digit: 0-9, A-F, a-f","Tests if byte is ASCII newline: \\\\n","Tests if byte is ASCII octal digit: 0-7","Tests if byte is ASCII space or tab","Character specific parsers and combinators, streaming …","Recognizes zero or more lowercase and uppercase ASCII …","Recognizes one or more lowercase and uppercase ASCII …","Recognizes zero or more ASCII numerical and alphabetic …","Recognizes one or more ASCII numerical and alphabetic …","Matches one byte as a character. Note that the input type …","Recognizes one character.","Recognizes the string “\\\\r\\\\n”.","Recognizes zero or more ASCII numerical characters: 0-9","Recognizes one or more ASCII numerical characters: 0-9","Recognizes zero or more ASCII hexadecimal numerical …","Recognizes one or more ASCII hexadecimal numerical …","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","Recognizes an end of line (both ‘\\\\n’ and ‘\\\\r\\\\n’).","Recognizes zero or more spaces, tabs, carriage returns and …","Recognizes one or more spaces, tabs, carriage returns and …","Matches a newline character ‘\\\\n’.","Recognizes a character that is not in the provided …","Recognizes a string of any char except ‘\\\\r\\\\n’ or ‘\\\\n…","Recognizes zero or more octal characters: 0-7","Recognizes one or more octal characters: 0-7","Recognizes one of the provided characters.","Recognizes one character and checks that it satisfies a …","Recognizes zero or more spaces and tabs.","Recognizes one or more spaces and tabs.","Matches a tab character ‘\\\\t’.","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","Recognizes zero or more lowercase and uppercase ASCII …","Recognizes one or more lowercase and uppercase ASCII …","Recognizes zero or more ASCII numerical and alphabetic …","Recognizes one or more ASCII numerical and alphabetic …","Matches one byte as a character. Note that the input type …","Recognizes one character.","Recognizes the string “\\\\r\\\\n”.","Recognizes zero or more ASCII numerical characters: 0-9","Recognizes one or more ASCII numerical characters: 0-9","Recognizes zero or more ASCII hexadecimal numerical …","Recognizes one or more ASCII hexadecimal numerical …","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","Recognizes an end of line (both ‘\\\\n’ and ‘\\\\r\\\\n’).","Recognizes zero or more spaces, tabs, carriage returns and …","Recognizes one or more spaces, tabs, carriage returns and …","Matches a newline character ‘\\\\n’.","Recognizes a character that is not in the provided …","Recognizes a string of any char except ‘\\\\r\\\\n’ or ‘\\\\n…","Recognizes zero or more octal characters: 0-7","Recognizes one or more octal characters: 0-7","Recognizes one of the provided characters.","Recognizes one character and checks that it satisfies a …","Recognizes zero or more spaces and tabs.","Recognizes one or more spaces and tabs.","Matches a tab character ‘\\\\t’.","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","will parse a number in text form to a number","Main structure associated to the iterator function.","Succeeds if all the input has been consumed by its child …","","","Transforms Incomplete into <code>Error</code>.","Calls the parser if the condition is met.","if the child parser was successful, return the consumed …","Transforms an <code>Err::Error</code> (recoverable) to <code>Err::Failure</code> …","returns its input if it is at the end of input data","A parser which always fails.","Returns the remaining input if parsing was successful, or …","Creates a new parser from the output of the first parser, …","Returns the argument unchanged.","automatically converts the child parser’s result to …","Calls <code>U::from(self)</code>.","Creates an iterator from input data and a parser.","Maps a function on the result of a parser.","Applies a function returning an <code>Option</code> over the result of …","Applies a parser over the result of another one.","Applies a function returning a <code>Result</code> over the result of a …","","Succeeds if the child parser returns an error.","Optional parser, will return <code>None</code> on <code>Err::Error</code>.","Tries to apply its parser without consuming the input.","If the child parser was successful, return the consumed …","Return the remaining input.","Return the length of the remaining input.","a parser which always succeeds with given value without …","","","","Returns the provided value if the child parser succeeds.","Returns the result of the child parser if it satisfies a …","","","","Indicates which character was expected by the <code>char</code> function","","","Static string added by the <code>context</code> function","This trait is required by the <code>context</code> combinator to add a …","","","","","default error type, only contains the error’ location …","Indicates which parser returned an error","","","","","","This trait is required by the <code>map_res</code> combinator to …","","","","","","","","","","","","","","","Error kind given by various nom parsers","","","","","","This trait must be implemented by the error type of a nom …","","","","","","","","","","","","","","","","","","","","This error type accumulates errors and their position when …","Error context for <code>VerboseError</code>","","Creates a new error from an input position, a static …","","Combines an existing error with a new one created from the …","","","Combines an existing error with a new one created from the …","","","","","","","","","","","","","","","nom error code","Create a new error from an input position, a static string …","","","","","Transforms a <code>VerboseError</code> into a trace with input position …","Prints a message and the input if the parser fails.","Converts an ErrorKind to a text description","","","","","","Converts an ErrorKind to a number","List of errors accumulated by <code>VerboseError</code>, containing the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an error from an input position and an expected …","","Creates an error from the input position and an ErrorKind","","","Creates a new error from an input position, an ErrorKind …","Create a new error from an input position and an external …","Create a new error from an input position and an external …","","position of the error in the input data","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an error from the input position and an ErrorKind","creates a new basic error","Combines two existing errors. This function is used to …","","","","","","","","","","","","","","","","","","internal std exports for no_std compatibility","Runs the embedded parser <code>count</code> times, gathering the …","Runs the embedded parser repeatedly, filling the given …","Repeats the embedded parser, calling <code>g</code> to gather the …","Repeats the embedded parser, calling <code>g</code> to gather the …","Repeats the embedded parser <code>m..=n</code> times, calling <code>g</code> to …","Gets a number from the first parser, then applies the …","Gets a number from the parser and returns a subslice of …","Gets a number from the first parser, takes a subslice of …","Repeats the embedded parser, gathering the results in a <code>Vec</code>…","Repeats the embedded parser, counting the results","Runs the embedded parser, gathering the results in a <code>Vec</code>.","Runs the embedded parser, counting the results.","Repeats the embedded parser <code>m..=n</code> times","Applies the parser <code>f</code> until the parser <code>g</code> produces a result.","Alternates between two parsers to produce a list of …","Alternates between two parsers to produce a list of …","Big endian","Configurable endianness","Little endian","Will match the host’s endianness","","","","","Parsers recognizing numbers, complete input version","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Parsers recognizing numbers, streaming version","","","","","Recognizes a big endian 4 bytes floating point number.","Recognizes a big endian 8 bytes floating point number.","Recognizes a big endian signed 16 bytes integer.","Recognizes a big endian signed 2 bytes integer.","Recognizes a big endian signed 3 bytes integer.","Recognizes a big endian signed 4 bytes integer.","Recognizes a big endian signed 8 bytes integer.","Recognizes a signed 1 byte integer.","Recognizes a big endian unsigned 16 bytes integer.","Recognizes a big endian unsigned 2 bytes integer.","Recognizes a big endian unsigned 3 byte integer.","Recognizes a big endian unsigned 4 bytes integer.","Recognizes a big endian unsigned 8 bytes integer.","Recognizes an unsigned 1 byte integer.","Recognizes floating point number in text format and …","Recognizes a 4 byte floating point number","Recognizes an 8 byte floating point number","Recognizes floating point number in text format and …","Recognizes a hex-encoded integer.","Recognizes a signed 16 byte integer","Recognizes a signed 2 byte integer","Recognizes a signed 3 byte integer","Recognizes a signed 4 byte integer","Recognizes a signed 8 byte integer","Recognizes a signed 1 byte integer","Recognizes a little endian 4 bytes floating point number.","Recognizes a little endian 8 bytes floating point number.","Recognizes a little endian signed 16 bytes integer.","Recognizes a little endian signed 2 bytes integer.","Recognizes a little endian signed 3 bytes integer.","Recognizes a little endian signed 4 bytes integer.","Recognizes a little endian signed 8 bytes integer.","Recognizes a signed 1 byte integer.","Recognizes a little endian unsigned 16 bytes integer.","Recognizes a little endian unsigned 2 bytes integer.","Recognizes a little endian unsigned 3 byte integer.","Recognizes a little endian unsigned 4 bytes integer.","Recognizes a little endian unsigned 8 bytes integer.","Recognizes an unsigned 1 byte integer.","Recognizes floating point number in a byte string and …","Recognizes a floating point number in text format","Recognizes an unsigned 16 byte integer","Recognizes an unsigned 2 bytes integer","Recognizes an unsigned 3 byte integer","Recognizes an unsigned 4 byte integer","Recognizes an unsigned 8 byte integer","Recognizes an unsigned 1 byte integer","Recognizes a big endian 4 bytes floating point number.","Recognizes a big endian 8 bytes floating point number.","Recognizes a big endian signed 16 bytes integer.","Recognizes a big endian signed 2 bytes integer.","Recognizes a big endian signed 3 bytes integer.","Recognizes a big endian signed 4 bytes integer.","Recognizes a big endian signed 8 bytes integer.","Recognizes a signed 1 byte integer.","Recognizes a big endian unsigned 16 bytes integer.","Recognizes a big endian unsigned 2 bytes integer.","Recognizes a big endian unsigned 3 byte integer.","Recognizes a big endian unsigned 4 bytes integer.","Recognizes a big endian unsigned 8 bytes integer.","Recognizes an unsigned 1 byte integer.","Recognizes floating point number in text format and …","Recognizes a 4 byte floating point number","Recognizes an 8 byte floating point number","Recognizes floating point number in text format and …","Recognizes a hex-encoded integer.","Recognizes a signed 16 byte integer","Recognizes a signed 2 byte integer","Recognizes a signed 3 byte integer","Recognizes a signed 4 byte integer","Recognizes a signed 8 byte integer","Recognizes a signed 1 byte integer","Recognizes a little endian 4 bytes floating point number.","Recognizes a little endian 8 bytes floating point number.","Recognizes a little endian signed 16 bytes integer.","Recognizes a little endian signed 2 bytes integer.","Recognizes a little endian signed 3 bytes integer.","Recognizes a little endian signed 4 bytes integer.","Recognizes a little endian signed 8 bytes integer.","Recognizes a signed 1 byte integer.","Recognizes a little endian unsigned 16 bytes integer.","Recognizes a little endian unsigned 2 bytes integer.","Recognizes a little endian unsigned 3 bytes integer.","Recognizes a little endian unsigned 4 bytes integer.","Recognizes a little endian unsigned 8 bytes integer.","Recognizes an unsigned 1 byte integer.","Recognizes a floating point number in text format and …","Recognizes a floating point number in text format","Recognizes an unsigned 16 byte integer","Recognizes an unsigned 2 bytes integer","Recognizes an unsigned 3 byte integer","Recognizes an unsigned 4 byte integer","Recognizes an unsigned 8 byte integer","Recognizes an unsigned 1 byte integer","Helper trait for the tuple combinator.","Matches an object from the first parser and discards it, …","Gets an object from the first parser, then gets another …","Parses the input and returns a tuple of results of each …","Matches an object from the first parser and discards it, …","Gets an object from the first parser, then matches an …","Gets an object from the first parser, then matches an …","Applies a tuple of parsers one by one and returns their …"],"i":[0,0,0,0,0,0,0,19,9,12,0,0,52,9,0,0,0,0,0,0,9,12,0,0,0,0,0,41,51,52,41,41,0,0,0,19,12,0,0,0,8,0,0,8,0,3,3,3,3,80,82,0,26,20,4,1,31,25,8,9,12,26,20,4,1,31,25,8,9,12,0,0,0,8,9,8,9,0,55,55,40,9,8,9,12,8,9,0,0,0,52,83,53,84,19,3,3,8,9,9,12,26,20,4,1,31,25,8,9,12,42,3,3,26,20,4,1,31,25,8,9,12,82,82,82,82,9,8,82,41,41,82,0,3,3,8,9,9,9,0,8,52,0,49,3,3,3,26,20,4,1,31,25,79,41,0,39,41,9,51,51,51,51,50,50,85,85,8,9,9,9,9,9,9,46,26,20,4,1,31,25,8,9,12,26,20,4,1,31,25,8,9,12,26,20,4,1,31,25,8,9,12,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,0,0,0,0,0,0,66,0,66,0,66,0,0,0,0,0,66,0,0,0,0,0,0,0,66,66,66,0,0,29,29,29,71,29,29,71,0,29,29,29,29,0,0,29,29,29,29,29,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,71,29,29,29,29,29,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,29,72,70,32,30,70,0,30,70,71,29,30,70,71,29,70,71,29,70,71,29,30,0,30,30,70,70,0,0,29,30,70,71,29,29,0,70,30,30,70,70,71,29,30,70,71,29,32,70,32,30,70,68,30,70,29,30,30,70,71,29,0,30,32,70,71,29,30,70,30,70,71,29,30,70,71,29,30,70,71,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,76,76,76,76,76,76,0,76,76,76,76,76,0,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-5],[[1,[-1,-5]]],2,[],[],[],[[3,[-2,-3,-4]]]],[[-1,-5],[[1,[-1,-5]]],2,[],[],[],[[3,[-2,-3,-4]]]],[[-1,-5],[[4,[-1,-5,-2]]],2,[],[],[],[[3,[-2,-3,-4]]]],[[-1,-5],[[4,[-1,-5,-2]]],2,[],[],[],[[3,[-2,-3,-4]]]],[-1,[[6,[5]]],[]],[-1,7,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[8,8],[[[9,[-1]]],[[9,[-1]]],10],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[9,[-2]]],[],[[13,[-1]]]],[[8,8],14],[[[9,[-1]],[9,[-1]]],14,15],[[12,12],14],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],0,0,0,[-1,11,[]],[[-1,-2],[[17,[16]]],[],[]],[[-1,-2],14,[],[]],[-1,[[18,[[11,[-2,-3]],-4]]],[],[],[],[]],[[[19,[-1,-2,-3]]],[[18,[[11,[-1,-2]],-3]]],[],[],[]],[[-1,-2],[[20,[-1,-2,-3]]],2,21,[]],[[-1,-2],[[20,[-1,-2,-3]]],2,21,[]],[[8,22],23],[[[9,[-1]],22],23,24],[[[9,[-1]],22],23,24],[[12,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,16,[]],[-1,[[25,[-1,-2,-3,-4,-5]]],2,[],[[13,[-2]]],[],[[13,[-4]]]],[-1,[[25,[-1,-2,-3,-4,-5]]],2,[],[[13,[-2]]],[],[[13,[-4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[[9,[-1]]],14,[]],[8,14],[-1,14,[]],[-1,[],[]],[-1,[],[]],[-1,16,[]],0,[[-1,-2],[[26,[-1,-2,-3]]],2,27,[]],[[-1,-2],[[26,[-1,-2,-3]]],2,27,[]],[[8,-1],8,27],[[[9,[-1]],-2],[[9,[-3]]],[],28,[]],[[[9,[[11,[-1,29]]]],-2],[[9,[[11,[-3,29]]]]],[],28,[]],[[[9,[[30,[-1]]]],-2],[[9,[[30,[-3]]]]],[],28,[]],0,[16,8],[-1,[],[]],0,[[-1,-1],16,[]],[[-1,-5],[[31,[-1,-5]]],2,[],[],[],[[3,[-2,-3,-4]]]],[[-1,-5],[[31,[-1,-5]]],2,[],[],[],[[3,[-2,-3,-4]]]],[[-1,-2],[[19,[-2,-3,-4]]],[],[],[],[]],[[[26,[-4,-5,-2]],-1],[[19,[-1,-6,-3]]],[],[],[],[[3,[-1,-2,-3]]],27,[]],[[[20,[-4,-5,-2]],-1],[[19,[-1,-6,-3]]],[],[],[],[[3,[-1,-2,-3]]],27,[]],[[[4,[-4,-6,-2]],-1],[[19,[-1,-5,-3]]],[],[],[],[[3,[-1,-2,-3]]],[],[[3,[-2,-5,-3]]]],[[[1,[-4,-6]],-1],[[19,[-1,[11,[-2,-5]],-3]]],[],[],[],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[[[31,[-4,-5]],-1],[[19,[-1,-2,-3]]],10,[],[[32,[-1]]],[[3,[-1,-2,-3]]],[[3,[-1,-2,-3]]]],[[[25,[-4,-2,-5,-3,-6]],-1],[[19,[-1,-5,-6]]],10,[],[],[[3,[-1,-2,-3]]],[[13,[-2]]],[[32,[-1]],[13,[-3]]]],[-1,[[17,[-2]]],[],[]],[[-1,-2],[[17,[16]]],[],27],0,[[-1,-2],-1,[],[]],[[-1,16],[[18,[16,8]]],[]],[[[9,[-1]]],[[17,[33]]],24],[[-1,-2],[[19,[-1,-1,-3]]],[],27,[[32,[-1]]]],[[-1,-2,29],[[19,[-1,-1,-3]]],[],27,[[32,[-1]]]],[[-1,-2,29],[[19,[-1,-1,-3]]],[],27,[[32,[-1]]]],[[-1,-2],[[19,[-1,-1,-3]]],[],27,[[32,[-1]]]],[[-1,16],-1,[]],[[-1,16],[[11,[-1,-1]]],[]],[[-1,16],34,[]],[[-1,16,16],34,[]],[-1,-2,[],[]],[[[9,[[30,[[6,[5]]]]]]],[[9,[[30,[[35,[5]]]]]]]],[[[9,[[11,[[6,[5]],29]]]]],[[9,[[11,[[35,[5]],29]]]]]],[[[9,[[30,[36]]]]],[[9,[[30,[34]]]]]],[[[9,[[11,[36,29]]]]],[[9,[[11,[34,29]]]]]],[-1,-2,[],[]],[-1,34,[]],[-1,16,[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-5,[[0,[21]]],[[39,[[38,[16]]]]],[],[[32,[-1]]],[[32,[[11,[-1,16]]]],[40,[-3]]],[[3,[[11,[-1,16]],-2,-4]]]],[-5,[[0,[21]]],[[39,[[38,[16]]]],10],[],[[32,[[11,[-1,16]]]]],[[32,[-1]],[40,[-3]]],[[3,[-1,-2,-4]]]],0,0,[[[11,[-1,16]]],[[19,[[11,[-1,16]],14,-2]]],[[39,[[38,[16]]]],41,42],[[32,[[11,[-1,16]]]]]],[[-1,-2],[[0,[27]]],[[13,[5]],43,[44,[16]],[45,[16]],15],46],[-1,[[0,[27]]],46],[[[11,[-1,16]]],[[19,[[11,[-1,16]],14,-2]]],[[39,[[38,[16]]]],41,42],[[32,[[11,[-1,16]]]]]],[[-1,-2],[[0,[27]]],[[13,[5]],43,[44,[16]],[45,[16]],15],46],[-1,[[0,[27]]],46],0,0,[-4,[[0,[21]]],10,[],[[32,[-1]]],[[47,[-1,-2,-3]]]],[[-1,-2],[[19,[-2,-3,-4]]],[],[],[],[]],[-4,[[0,[21]]],10,[],[[32,[-1]]],[[48,[-1,-2,-3]]]],[[-1,-2],[[19,[-2,-3,-4]]],[],[],[],[]],0,0,[[-4,7,-6],[[0,[21]]],[10,49,42,50,51,[39,[[38,[16]]]],41],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[[-4,7,-6],[[0,[21]]],[10,49,42,50,51,[39,[[38,[16]]]],41,52],52,[[32,[-1]]],[[3,[-1,-2,-3]]],52,[[3,[-1,-5,-3]]]],[-1,[[0,[27]]],53],[-1,[[0,[27]]],53],[-1,[[0,[27]]],[42,10]],[-1,[[0,[27]]],[42,10]],[-1,[[0,[27]]],46],[-1,[[0,[27]]],27],[-1,[[0,[27]]],27],[-1,[[0,[27]]],[42,10]],[-1,[[0,[27]]],[42,10]],[-1,[[0,[27]]],27],[-1,[[0,[27]]],27],[[16,16,-1],[[0,[27]]],27],[[-4,7,-6],[[0,[21]]],[10,49,42,50,51,[39,[[38,[16]]]],41],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[[-4,7,-6],[[0,[21]]],[10,49,42,50,51,[39,[[38,[16]]]],41,52],52,[[32,[-1]]],[[3,[-1,-2,-3]]],52,[[3,[-1,-5,-3]]]],[-1,[[0,[27]]],53],[-1,[[0,[27]]],53],[-1,[[0,[27]]],[42,10]],[-1,[[0,[27]]],[42,10]],[-1,[[0,[27]]],46],[-1,[[0,[27]]],27],[-1,[[0,[27]]],27],[-1,[[0,[27]]],10],[-1,[[0,[27]]],10],[-1,[[0,[27]]],27],[-1,[[0,[27]]],27],[[16,16,-1],[[0,[27]]],27],0,[5,14],[5,14],[5,14],[5,14],[5,14],[5,14],[5,14],0,[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,7,-2]]],[41,42,[39,[[38,[16]]]]],[[32,[-1]]]],[7,[[0,[27]]]],[-1,[[19,[-1,-1,-2]]],[[39,[[54,[16]]]],[39,[[38,[16]]]],41,[55,[36]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,56,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,57,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,59,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,60,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],[[39,[[54,[16]]]],[39,[[38,[16]]]],[39,[[61,[16]]]],41,42,[55,[36]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,7,-2]]],[[39,[[38,[16]]]],41],[[32,[-1]]]],[-1,[[0,[27]]],53],[-1,[[19,[-1,-1,-2]]],[[39,[[54,[16]]]],[39,[[38,[16]]]],[39,[[61,[16]]]],41,42,[55,[36]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[0,[27]]],53],[-1,[[0,[27]]],27],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,7,-2]]],[[39,[[38,[16]]]],41],[[32,[-1]]]],[-1,[[19,[-1,62,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,63,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,65,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,5,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,7,-2]]],[41,42,[39,[[38,[16]]]]],[[32,[-1]]]],[7,[[0,[27]]]],[-1,[[19,[-1,-1,-2]]],[[39,[[54,[16]]]],[39,[[38,[16]]]],[39,[[61,[16]]]],41,[55,[36]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,56,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,57,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,59,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,60,-2]]],[41,[39,[[38,[16]]]],42,50,10,[55,[[6,[5]]]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],[[39,[[54,[16]]]],[39,[[38,[16]]]],[39,[[61,[16]]]],41,42,[55,[36]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,7,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[0,[27]]],53],[-1,[[19,[-1,-1,-2]]],[[39,[[54,[16]]]],[39,[[38,[16]]]],[39,[[61,[16]]]],41,42,[55,[36]]],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[0,[27]]],53],[-1,[[0,[27]]],27],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],51,[[32,[-1]]]],[-1,[[19,[-1,7,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,62,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,63,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,65,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,5,-2]]],[41,[39,[[38,[16]]]],42],[[32,[-1]]]],0,[-4,[[0,[21]]],42,[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-4,[[0,[21]]],10,[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[[14,-4],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],[10,49,[39,[[61,[16]]]]],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-1,[[19,[-1,-1,-2]]],[42,10],[[32,[-1]]]],[-1,[[19,[-1,-2,-3]]],[],[],[[32,[-1]]]],[[[66,[-1,-2,-3]]],[[19,[-1,11,-2]]],10,[],[]],[[-4,-5],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]],21],[-1,-1,[]],[-6,[[0,[21]]],[],[],[[67,[-2]]],[[32,[-1]]],[[67,[-4]],[32,[-1]]],[[3,[-1,-3,-5]]]],[-1,-2,[],[]],[[-1,-4],[[66,[-1,-3,-4]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[[-4,-5],[[0,[21]]],[],[],[],[[3,[-1,-2,-3]]],21],[[-4,-5],[[0,[21]]],10,[],[[32,[-1]]],[[3,[-1,-2,-3]]],21],[[-4,-6],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-2,-5,-3]]]],[[-5,-6],[[0,[21]]],10,[],[],[[68,[-1,-3]]],[[3,[-1,-2,-4]]],21],[[[66,[-1,-2,-3]]],17,10,[],21],[-4,[[0,[21]]],10,[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],10,[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],10,[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],[10,49,[39,[[61,[16]]]]],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-1,[[19,[-1,-1,-2]]],[[39,[[38,[16]]]],42],[[32,[-1]]]],[-1,[[19,[-1,16,-2]]],42,[[32,[-1]]]],[-1,[[0,[27]]],10],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,37,[]],[[-1,-5],[[0,[21]]],10,[],[],[[32,[-2]]],[[3,[-2,-3,-4]]]],[[-5,-6],[[0,[21]]],10,2,[[69,[-2]]],[[32,[-1]]],[[3,[-1,-3,-4]]],27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,36,-2],-2,[],[]],[[-1,36,[70,[-1]]],[[70,[-1]]],[]],[[-1,29,-2],-2,[],[]],[[-1,29,[30,[-1]]],[[30,[-1]]],[]],[[-1,29,[70,[-1]]],[[70,[-1]]],[]],[[-1,29,-2],-2,[],[[32,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1]]],[[70,[-1]]],10],[71,71],[29,29],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,[[36,-4],[[0,[21]]],10,[],[[72,[-1]]],[[3,[-1,-2,-3]]]],[[[30,[-1]]],[[30,[[11,[-1,16]]]]],[]],[[[30,[[11,[-1,16]]]]],[[30,[-1]]],[]],[[[70,[[11,[-1,16]]]]],[[70,[-1]]],[]],[[[70,[-1]]],[[70,[[11,[-1,16]]]]],[]],[[-1,[70,[-1]]],34,73],[[-1,36],[[0,[27]]],27],[29,36],[[[30,[-1]],[30,[-1]]],14,15],[[[70,[-1]],[70,[-1]]],14,15],[[71,71],14],[[29,29],14],[[-1,-2],14,[],[]],[29,64],0,[[[30,[-1]],22],23,74],[[[30,[-1]],22],23,24],[[[70,[-1]],22],23,24],[[[70,[-1]],22],23,74],[[71,22],23],[[29,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,7],-2,[],[]],[[-1,7],[[70,[-1]]],[]],[[-1,29],-2,[],[]],[[-1,29],[[30,[-1]]],[]],[[-1,29],[[70,[-1]]],[]],[[-1,29,-2],-3,[],[],[]],[[-1,29,-2],[[30,[-1]]],[],[]],[[-1,29,-2],[[70,[-1]]],[],[]],[[29,-1],11,75],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,29],-2,[],[[32,[-1]]]],[[-1,29],[[30,[-1]]],[]],[[-1,-1],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,34,[]],[-1,34,[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],0,[[-4,16],[[0,[21]]],[10,15],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[[-1,[6,[-2]]],[[0,[21]]],27,[]],[[-4,-5,-6],[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]],21,21],[[-4,-5,-6],[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]],21,21],[[16,16,-4,-5,-6],[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]],21,21],[[-4,-6],[[0,[21]]],10,46,[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[-4,[[0,[21]]],[42,50],46,[[32,[-1]]],[[3,[-1,-2,-3]]]],[[-4,-6],[[0,[21]]],[10,42,50],46,[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[-4,[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[-4,[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[[16,16,-4],[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]]],[[-4,-6],[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[[-4,-6],[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[[-4,-6],[[0,[21]]],[10,42],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[76,76],[[-1,-2],11,[],[]],0,[[76,76],14],[[-1,-2],14,[],[]],[[76,22],23],[-1,-1,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,37,[]],[-1,[[19,[-1,77,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,78,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,56,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,57,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,59,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,60,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,62,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,63,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,65,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,5,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,78,-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],[39,[[54,[16]]]],10,49,[79,[78]],[55,[36]],41,42,50,51,80,[55,[[6,[5]]]]],[[32,[-1]]]],[76],[76],[-1,[[19,[-1,77,-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],[39,[[54,[16]]]],10,49,[79,[77]],[55,[36]],41,42,50,51,80,[55,[[6,[5]]]]],[[32,[-1]]]],[[[6,[5]]],[[19,[[6,[5]],64,-1]]],[[32,[[6,[5]]]]]],[76],[76],[76],[76],[76],[-1,[[19,[-1,60,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,77,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,78,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,56,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,57,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,59,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,60,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,62,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,63,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,65,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,5,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],10,49,41,51],[[32,[-1]]]],[-1,[[19,[-1,[11,[14,-1,-1,58]],-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],[39,[[54,[16]]]],10,49,41,50,51,42,[55,[[6,[5]]]],80],[[32,[-1]]]],[76],[76],[76],[76],[76],[-1,[[19,[-1,5,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,77,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,78,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,56,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,57,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,59,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,60,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,62,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,63,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,65,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,5,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,78,-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],10,49,41,42,50,[79,[78]],[55,[36]],51,80,[55,[[6,[5]]]]],[[32,[-1]]]],[76],[76],[-1,[[19,[-1,77,-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],10,49,41,42,50,[79,[77]],[55,[36]],51,80,[55,[[6,[5]]]]],[[32,[-1]]]],[[[6,[5]]],[[19,[[6,[5]],64,-1]]],[[32,[[6,[5]]]]]],[76],[76],[76],[76],[76],[-1,[[19,[-1,60,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,77,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,78,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,56,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,57,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,58,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,59,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,60,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,62,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,63,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,64,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,65,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,5,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],[-1,[[19,[-1,-1,-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],10,49,41,51,42],[[32,[-1]]]],[-1,[[19,[-1,[11,[14,-1,-1,58]],-2]]],[[39,[[38,[16]]]],[39,[[61,[16]]]],10,49,41,[79,[58]],51,50,42,[55,[[6,[5]]]],80],[[32,[-1]]]],[76],[76],[76],[76],[76],[-1,[[19,[-1,5,-2]]],[[39,[[38,[16]]]],41,42],[[32,[-1]]]],0,[[-4,-6,-8],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]],[],[[3,[-1,-7,-3]]]],[[-4,-6],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[[-1,-2],[[19,[-2,-3,-4]]],[],[],[],[]],[[-4,-6],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[[-4,-6,-8],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]],[],[[3,[-1,-7,-3]]]],[[-4,-6],[[0,[21]]],[],[],[[32,[-1]]],[[3,[-1,-2,-3]]],[],[[3,[-1,-5,-3]]]],[-4,[[0,[21]]],[],[],[[32,[-1]]],[[81,[-1,-2,-3]]]]],"c":[],"p":[[3,"And",0],[8,"Sized",639],[8,"Parser",0],[3,"AndThen",0],[15,"u8"],[15,"slice"],[15,"char"],[4,"Needed",0],[4,"Err",0],[8,"Clone",640],[15,"tuple"],[4,"CompareResult",0],[8,"From",641],[15,"bool"],[8,"PartialEq",642],[15,"usize"],[4,"Option",643],[4,"Result",644],[6,"IResult",0],[3,"FlatMap",0],[8,"FnMut",645],[3,"Formatter",646],[6,"Result",646],[8,"Debug",646],[3,"Into",0],[3,"Map",0],[8,"Fn",645],[8,"FnOnce",645],[4,"ErrorKind",358],[3,"Error",358],[3,"Or",0],[8,"ParseError",358],[8,"Error",647],[3,"String",648],[3,"Vec",649],[15,"str"],[3,"TypeId",650],[3,"RangeFrom",651],[8,"Slice",0],[8,"ErrorConvert",0],[8,"InputIter",0],[8,"InputLength",0],[8,"AddAssign",652],[8,"Shl",653],[8,"Shr",653],[8,"ToUsize",0],[8,"Alt",212],[8,"Permutation",212],[8,"Offset",0],[8,"InputTake",0],[8,"InputTakeAtPosition",0],[8,"ExtendInto",0],[8,"FindToken",0],[3,"Range",651],[8,"Compare",0],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"RangeTo",651],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[3,"ParserIterator",325],[8,"Into",641],[8,"FromExternalError",358],[8,"Borrow",654],[3,"VerboseError",358],[4,"VerboseErrorKind",358],[8,"ContextError",358],[8,"Deref",655],[8,"Display",646],[8,"Hasher",656],[4,"Endianness",518],[15,"f32"],[15,"f64"],[8,"ParseTo",0],[8,"AsBytes",0],[8,"Tuple",631],[8,"AsChar",0],[8,"FindSubstring",0],[8,"Finish",0],[8,"HexDisplay",0]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","t":"DGDIIIIIDIIQIIIIIGGGIIIIIFKKLLFKKLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLKLLKKLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFKLLLLLLKKLLLKLLLLLKLLLFLLKLLLLFKLLLLLLLLLLALLLKLLKLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLKLLLLLLLLLKLLKLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLKLLLLLLLLKLLMKAKLLLLLLLKLLKLLKLLKLLKLLKLKLLKLLLLLLKLKKLKLLLALLLLLLKLLLKKLLKKLLKLLKLLLKKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKKLLLLLLLLLLLLLLFKLLLLLLLAFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLFFFFALMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKFKKLKLLKKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLAKLLLLLLLLLLLLLLLLLLKKFKLLLDDNNDNEIIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLDGGIDQKKKKKKKKLLKKKKLLKKKLLLKMMMLKKKKKKKKKKKKKMMMKKKKKKLLLLIDIDIFKFKFLLLLFLLLFLFKFLFKKLLLLLLLFKMFLLLLKKKFKFKFLLLFKLFLLLLLLLLMMDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIFFKGDDGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIQQIIIIIIIIIKNIKKKKKKKKKIIEIIQINKKLKLKIIIIIIIIIIQQQKDIIIKIIIIILIIIIIIIIIIFKKFKKKKKKKKKKLLLLAAFKKKKKKKFKKKKKFFFKLKKKKKLKKKAKLLLKKLLKKLLLLLKLLKKLKLLLKLLKAKAKLLKKKKKKLKKKLKMLKKKKKKKKKKKKKKKKKKKFKAAFKKKKAKKLKKKKKKKKLLAKKFKKKKKKKKKKKLLLLLLKLLKKLLLLLLKLLLKKLLLLLLKKKKKKKKFKIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["BigInt","BigRational","BigUint","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedSub","Complex","Float","FromPrimitive","FromStrRadixErr","Integer","Num","NumCast","One","PrimInt","Rational","Rational32","Rational64","Saturating","Signed","ToPrimitive","Unsigned","Zero","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","assign_from_slice","assign_from_slice","atan","atan","atan","atan2","atanh","atanh","atanh","average_ceil","average_ceil","average_floor","average_floor","bigint","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","ceil","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_mul","checked_mul","checked_mul","checked_mul","checked_pow","checked_rem_euclid","checked_rem_euclid","checked_sub","checked_sub","checked_sub","checked_sub","cis","clamp","classify","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","complex","conj","conj","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_zeros","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_ceil","div_euclid","div_euclid","div_floor","div_floor","div_floor","div_mod_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem","divides","divides","divides","epsilon","eq","eq","eq","equivalent","equivalent","equivalent","exp","exp","exp","exp2","exp2","exp2","exp_m1","expf","expf","extended_gcd","extended_gcd_lcm","extended_gcd_lcm","fdiv","finv","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_be_bytes","from_be_bytes","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_le","from_le_bytes","from_le_bytes","from_polar","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","gcd","gcd","gcd","gcd_lcm","gcd_lcm","gcd_lcm","hash","hash","hash","hypot","i","im","im","infinity","integer","integer_decode","into","into","into","into_parts","inv","inv","inv","is_even","is_even","is_even","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_multiple_of","is_multiple_of","is_multiple_of","is_nan","is_nan","is_nan","is_negative","is_negative","is_normal","is_normal","is_normal","is_odd","is_odd","is_odd","is_one","is_one","is_one","is_one","is_positive","is_positive","is_sign_negative","is_sign_positive","is_subnormal","is_zero","is_zero","is_zero","is_zero","iter","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","l1_norm","l1_norm","lcm","lcm","lcm","leading_ones","leading_zeros","ln","ln","ln","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","magnitude","max","max_value","max_value","min","min_positive_value","min_value","min_value","mod_floor","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nan","neg","neg","neg","neg","neg_infinity","neg_zero","new","new","new","next_multiple_of","next_multiple_of","next_multiple_of","norm","norm_sqr","not","not","nth_root","nth_root","nth_root","nth_root","one","one","one","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powf","powf","powf","powi","powi","powi","powu","prev_multiple_of","prev_multiple_of","prev_multiple_of","product","product","product","product","range","range_inclusive","range_step","range_step_inclusive","rational","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_sub","scale","set_bit","set_bit","set_one","set_one","set_one","set_one","set_zero","set_zero","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signed_shl","signed_shr","signum","signum","signum","signum","sin","sin","sin","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","swap_bytes","tan","tan","tan","tanh","tanh","tanh","to_be","to_be_bytes","to_be_bytes","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_degrees","to_f32","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_le","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_polar","to_radians","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64","to_u64","to_u64_digits","to_u64_digits","to_u8","to_u8","to_usize","to_usize","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","trailing_zeros","traits","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unscale","unsigned_shl","unsigned_shr","zero","zero","zero","zero","zero","BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","count","count","description","description","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","into_iter","into_iter","into_original","last","last","len","len","mul","neg","next","next","next_back","next_back","nth","partial_cmp","size_hint","size_hint","to_bigint","to_biguint","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","Complex","Complex32","Complex64","ComplexFloat","ParseComplexError","Real","abs","acos","acosh","arg","asin","asinh","atan","atanh","borrow","borrow_mut","cbrt","conj","cos","cosh","description","eq","exp","exp2","expf","fmt","fmt","from","im","im","im","im","into","is_finite","is_infinite","is_nan","is_normal","l1_norm","ln","log","log10","log2","powc","powf","powi","re","re","re","re","recip","sin","sinh","sqrt","tan","tanh","to_string","try_from","try_into","type_id","Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","equivalent","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Output","Pow","checked_pow","pow","pow","BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","equivalent","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","AsPrimitive","Bounded","Bytes","Bytes","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","Euclid","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","copysign","cos","cosh","count_ones","count_zeros","div_euclid","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_be_bytes","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_le_bytes","from_ne_bytes","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_subnormal","is_zero","kind","leading_ones","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_be_bytes","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_le_bytes","to_ne_bytes","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_ones","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num"],[1593,"num::bigint"],[1687,"num::cast"],[1722,"num::complex"],[1781,"num::integer"],[1848,"num::iter"],[1944,"num::pow"],[1949,"num::rational"],[2239,"num::traits"],[2507,"num::traits::bounds"],[2514,"num::traits::cast"],[2549,"num::traits::float"],[2660,"num::traits::identities"],[2670,"num::traits::int"],[2690,"num::traits::ops"],[2698,"num::traits::ops::bytes"],[2709,"num::traits::ops::checked"],[2725,"num::traits::ops::euclid"],[2731,"num::traits::ops::inv"],[2734,"num::traits::ops::mul_add"],[2739,"num::traits::ops::overflowing"],[2745,"num::traits::ops::saturating"],[2754,"num::traits::ops::wrapping"],[2766,"num::traits::pow"],[2771,"num::traits::real"],[2819,"num::traits::sign"],[2829,"core::clone"],[2830,"core::marker"],[2831,"core::option"],[2832,"core::cmp"],[2833,"core::num"],[2834,"core::cmp"],[2835,"core::default"],[2836,"core::fmt"],[2837,"core::fmt"],[2838,"core::fmt"],[2839,"core::hash"],[2840,"core::hash"],[2841,"alloc::vec"],[2842,"core::ops::arith"],[2843,"core::ops::arith"],[2844,"core::any"],[2845,"core::error"],[2846,"core::fmt"],[2847,"core::fmt"]],"d":["A big signed integer type.","Alias for arbitrary precision rationals.","A big unsigned integer type.","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs subtraction that returns <code>None</code> instead of wrapping …","A complex number in Cartesian form.","Generic trait for floating point numbers","A generic trait for converting a number to a value.","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","An interface for casting between machine scalars.","Defines a multiplicative identity element for <code>Self</code>.","Generic trait for primitive integers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Useful functions for signed numbers (i.e. numbers that can …","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","","","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","","Computes the arccosine of a number. Return value is in …","Computes the principal value of the inverse cosine of <code>self</code>.","","Inverse hyperbolic cosine function.","","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the principal Arg of self.","","","Computes the arcsine of a number. Return value is in …","","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","","Computes the principal value of inverse hyperbolic sine of …","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Computes the arctangent of a number. Return value is in …","","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","","Returns the truncated principal cube root of <code>self</code> – see …","Computes the principal value of the cube root of <code>self</code>.","","","Returns the truncated principal cube root of <code>self</code> – see …","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","","","","Divides two numbers, checking for underflow, overflow and …","","","","","","Multiplies two numbers, checking for underflow or …","","","","Raises a value to the power of exp, returning <code>None</code> if an …","","","Subtracts two numbers, checking for underflow. If …","","","","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","A value bounded by a minimum and a maximum","Returns the floating point category of the number. If only …","","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","","Computes the hyperbolic cosine of <code>self</code>.","Returns the number of ones in the binary representation of …","Returns the number of one bits.","Returns the number of zeros in the binary representation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ceiled integer division.","","","","","Floored integer division.","","","Simultaneous floored integer division and modulus. Returns …","","","Simultaneous truncated integer division and modulus. …","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Returns epsilon, a small positive value.","","","","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Returns <code>2^(self)</code>.","","Computes <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Raises a floating point number to the complex power <code>self</code>.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Greatest common divisor, least common multiple, and …","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","Returns the largest integer less than or equal to a number.","","","","","","","","","","","","","","","","","","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Convert an integer from big endian to the target’s …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Converts a <code>f32</code> to return an optional value of this type. …","","Converts a <code>f64</code> to return an optional value of this type. …","","","","Converts an <code>i128</code> to return an optional value of this type. …","","","","Converts an <code>i16</code> to return an optional value of this type. …","","Converts an <code>i32</code> to return an optional value of this type. …","","Converts an <code>i64</code> to return an optional value of this type. …","","","","Converts an <code>i8</code> to return an optional value of this type. …","","Converts an <code>isize</code> to return an optional value of this …","","Convert an integer from little endian to the target’s …","","","Convert a polar representation into a complex number.","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","Convert from a string and radix (typically <code>2..=36</code>).","Creates and initializes a <code>BigInt</code>.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Creates and initializes a <code>BigUint</code>.","Converts an <code>u128</code> to return an optional value of this type. …","","","","Converts an <code>u16</code> to return an optional value of this type. …","","Converts an <code>u32</code> to return an optional value of this type. …","","Converts an <code>u64</code> to return an optional value of this type. …","","","","Converts an <code>u8</code> to return an optional value of this type. …","","Converts a <code>usize</code> to return an optional value of this type. …","","Greatest Common Divisor (GCD).","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","Calculate the length of the hypotenuse of a right-angle …","Returns imaginary unit","","Imaginary portion of the complex number","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>1/self</code>","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Checks if the given complex number is finite","","Returns <code>true</code> if this value is positive infinity or …","Checks if the given complex number is infinite","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","","Checks if the given complex number is NaN","Returns true if the number is negative and false if the …","","Returns <code>true</code> if the number is neither zero, infinite, …","","Checks if the given complex number is normal","Returns <code>true</code> if the number is odd.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","","","Returns true if the number is positive and false if the …","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Lowest Common Multiple (LCM).","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Computes the principal value of natural logarithm of <code>self</code>.","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","Returns the base 10 logarithm of the number.","Computes the principal value of log base 10 of <code>self</code>.","","Returns the base 2 logarithm of the number.","Computes the principal value of log base 2 of <code>self</code>.","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Floored integer modulo, satisfying:","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaN</code> value.","","","","","Returns the negative infinite value.","Returns <code>-0.0</code>.","Creates and initializes a <code>BigInt</code>.","Create a new Complex","Creates and initializes a <code>BigUint</code>.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","","Raise a number to a floating point power.","Raises <code>self</code> to a floating point power.","","Raise a number to an integer power.","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to an unsigned integer power.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Multiplies <code>self</code> by the scalar <code>t</code>.","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given position","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</codeeturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","Returns the truncated principal square root of <code>self</code> – …","","Computes the principal value of the square root of <code>self</code>.","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","","Convert <code>self</code> to big endian from the target’s endianness.","","","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","","Convert <code>self</code> to little endian from the target’s …","","","","","","Convert to polar form (r, theta), such that …","Converts degrees to radians.","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","","Returns the number of trailing ones in the binary …","Returns the number of least-significant bits that are ones.","Returns the number of trailing zeros in the binary …","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","Return the integer part of a number.","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","","A big signed integer type.","A big unsigned integer type.","","","","","A <code>Sign</code> is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will …","","","","","","Negate <code>Sign</code> value.","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","Converts the value of <code>self</code> to a <code>BigUint</code>.","","","","","","","","","","","","","","","","","","","","","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","A complex number in Cartesian form.","","","Generic trait for floating point complex numbers.","","The type used to represent the real coefficients of this …","Returns the absolute value of the number. See also …","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the argument of the number.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Inverse hyperbolic tangent function.","","","Take the cubic root of a number.","Computes the complex conjugate of the number.","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","","","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>base^(self)</code>.","","","Returns the argument unchanged.","Returns the imaginary part of the number.","Imaginary portion of the complex number","Imaginary portion of the complex number","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a real power.","Raises <code>self</code> to a signed integer power.","Returns the real part of the number.","Real portion of the complex number","Real portion of the complex number","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","Computes the sine of a number (in radians).","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","","","","","Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","","","An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Return Euler’s number.","","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for <code>Num</code> references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that can …","Return the full circle constant <code>τ</code>.","","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Performs euclid division that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Finds the euclid remainder of dividing two numbers, …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates Euclidean division, the matching method for …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Returns the largest integer less than or equal to a number.","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","Returns the argument unchanged.","Returns the argument unchanged.","Convert an integer from big endian to the target’s …","Create a number from its representation as a byte array in …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Return the memory representation of this number as a byte …","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,2,3,0,4,1,2,4,3,3,4,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,20,20,20,20,20,20,20,20,3,3,3,4,3,3,4,3,3,2,20,4,3,3,4,4,3,3,2,20,2,20,0,2,20,2,2,2,2,20,20,20,20,2,2,20,20,2,2,2,2,20,20,20,20,2,2,20,20,2,20,2,2,2,2,20,20,20,20,2,2,20,20,2,3,20,2,3,20,0,0,4,2,2,3,3,20,20,4,63,2,2,20,95,2,2,20,2,20,31,2,2,20,0,2,20,81,2,2,20,3,0,4,2,3,20,2,20,2,3,20,2,20,0,3,3,4,4,3,3,4,3,3,96,20,96,2,3,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,20,20,20,20,20,20,20,20,73,2,20,2,20,73,2,20,73,2,20,73,2,20,73,2,20,4,2,3,20,2,3,20,4,3,3,4,3,3,4,3,3,73,73,2,3,3,4,2,2,2,2,2,2,3,3,3,3,3,3,3,3,20,20,20,20,20,20,4,29,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,20,20,20,20,20,20,20,20,96,2,20,2,2,20,2,20,44,3,44,2,3,20,44,2,3,20,44,3,44,3,44,2,3,20,44,3,44,3,96,2,20,3,2,20,2,20,2,2,2,20,2,3,20,19,2,3,20,44,2,3,20,44,3,44,3,44,2,3,20,44,3,44,3,73,2,20,73,2,20,2,3,20,4,3,3,3,4,0,4,2,3,20,2,3,3,3,73,2,20,4,3,3,4,3,3,73,2,20,4,3,3,1,2,4,3,3,73,2,20,30,2,3,20,1,2,4,4,4,64,2,3,20,0,2,20,2,20,3,3,73,2,20,96,96,4,3,3,4,4,3,3,4,3,3,4,3,3,2,4,80,4,4,4,80,4,73,2,20,2,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,20,20,20,20,20,20,20,20,4,2,2,3,3,4,4,2,3,20,73,2,20,3,3,2,2,2,2,20,20,0,30,2,3,20,2,20,2,20,0,0,96,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,3,3,4,3,3,4,3,3,3,73,2,20,2,3,3,20,0,0,0,0,0,3,3,4,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,20,20,20,20,20,20,20,20,2,20,96,96,96,4,97,97,3,2,20,30,2,3,20,64,2,3,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,96,96,0,4,1,2,4,3,3,4,4,3,3,4,2,2,3,3,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,20,20,20,20,20,20,20,20,2,3,3,20,96,4,3,3,4,3,3,96,2,20,2,20,2,2,20,2,20,2,20,4,42,2,3,20,42,2,3,20,42,2,3,20,42,3,42,3,42,2,3,20,42,3,42,3,96,2,20,2,3,20,3,4,2,20,2,20,2,2,2,20,2,3,20,42,2,3,20,42,3,42,3,2,20,42,2,3,20,2,20,42,3,42,3,96,20,96,2,20,0,4,2,3,20,20,20,20,20,20,20,20,20,2,3,20,2,3,20,3,96,96,0,64,2,3,20,0,0,25,25,0,25,0,0,0,0,0,0,53,54,25,47,67,53,54,25,47,67,25,47,67,25,47,67,25,53,54,47,67,25,47,67,25,47,67,25,47,47,67,67,53,54,25,47,67,25,53,54,25,47,67,53,54,67,53,54,53,54,25,25,53,54,53,54,54,25,53,54,90,98,25,47,67,47,67,53,54,25,47,67,53,54,25,47,67,53,54,25,47,67,0,0,0,0,24,0,29,44,44,44,44,44,44,44,44,44,44,44,44,44,44,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,99,99,99,99,99,99,99,99,99,69,69,99,99,99,99,69,69,99,99,99,69,69,69,99,100,101,3,69,99,99,99,99,99,99,99,99,99,99,99,99,99,100,101,3,99,99,99,99,99,99,69,69,69,69,0,0,0,0,0,0,72,0,72,0,75,37,75,37,0,74,37,37,0,73,0,73,0,73,0,73,73,37,37,73,73,37,75,37,0,73,37,0,73,75,37,75,73,73,73,0,73,0,73,0,75,75,73,0,74,73,0,74,37,75,37,75,37,75,37,37,37,0,0,0,0,0,0,59,61,62,65,76,77,59,61,62,65,76,77,59,61,62,65,76,77,59,61,62,65,76,77,59,61,76,59,61,62,65,76,77,59,61,62,65,76,77,59,61,62,65,76,77,59,61,62,65,76,77,59,61,0,0,0,0,0,0,59,61,76,77,59,61,76,59,61,62,65,76,77,59,61,62,65,76,77,59,61,62,65,76,77,59,61,62,65,76,77,89,0,0,0,89,0,0,0,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,82,79,82,79,79,79,79,79,79,82,79,82,79,79,79,82,79,79,79,79,79,79,79,79,79,79,79,79,79,82,79,79,79,79,79,79,79,79,79,79,82,82,79,79,79,79,82,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,82,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,82,79,82,79,79,79,79,82,79,82,79,82,79,0,0,102,103,0,0,0,0,0,0,0,0,0,5,93,0,5,5,5,5,5,5,5,5,5,0,0,0,0,0,19,0,93,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,104,105,89,5,0,0,0,0,5,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,1,0,4,1,4,4,24,4,4,4,4,4,93,94,93,94,0,0,0,4,4,63,95,106,31,107,0,108,106,109,110,81,0,0,0,4,4,4,4,96,96,111,4,4,4,4,0,4,93,94,94,4,29,93,94,96,103,44,44,44,44,44,44,44,44,96,103,103,19,44,44,44,44,44,44,4,0,4,0,4,93,94,104,4,4,4,1,4,30,1,4,4,4,64,94,96,96,4,4,4,4,4,4,80,4,4,4,80,4,4,105,112,4,4,4,0,30,0,0,0,96,89,4,4,0,4,111,96,96,96,4,97,113,114,97,115,30,64,0,96,96,0,4,1,4,4,4,4,96,4,4,96,102,4,42,42,42,42,42,42,42,42,96,102,102,4,94,42,42,42,42,42,42,96,96,4,93,94,93,94,93,94,96,96,116,117,118,119,120,121,0,64,0,0,0,80,122,80,123,0,0,0,0,24,0,29,44,44,44,44,44,44,44,44,44,44,44,44,44,44,42,42,42,42,42,42,42,42,42,42,42,42,42,42,5,5,5,5,5,5,5,5,5,5,0,0,0,5,5,5,5,5,5,5,5,5,4,51,4,4,4,4,4,4,4,4,4,4,51,51,4,4,4,4,51,4,4,4,4,4,51,4,51,4,51,4,51,4,4,51,4,51,4,51,4,51,4,51,4,51,51,4,4,4,4,4,4,4,51,51,4,4,51,51,4,51,4,4,51,4,51,4,51,4,4,4,51,4,51,4,51,4,51,4,4,4,4,4,4,51,4,51,4,4,51,0,0,30,64,0,30,30,64,0,64,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,0,0,0,0,0,0,0,102,103,0,0,0,103,103,103,102,102,102,0,0,0,0,0,0,0,0,63,95,31,107,108,109,110,81,0,0,106,106,111,111,0,104,104,0,0,105,105,112,0,0,0,124,125,126,0,0,0,0,97,113,114,97,115,0,0,0,0,0,0,116,117,118,119,120,121,89,0,0,0,89,0,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,0,0,1,0,1,1,1,0,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,1],[-1,-1,[]],[-1,-1,[]],[2,2],[[[3,[-1]]],[],[4,5]],[[-1,-1],-1,1],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[2,2],2],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[[2,6],2],[[2,7],2],[[2,8],2],[[2,7],2],[[2,9],2],[[2,10],2],[[2,6],2],[[2,11],2],[[2,12],2],[[2,10],2],[[2,13],2],[[2,6],2],[[2,14],2],[[2,15],2],[[2,16],2],[[2,11],2],[[2,14],2],[[2,17],2],[[2,12],2],[[2,11],2],[[2,14],2],[[2,17],2],[[2,9],2],[[2,2],2],[[2,14],2],[[2,13],2],[[2,10],2],[[2,2],2],[[2,15],2],[[2,17],2],[[2,7],2],[[2,13],2],[[2,12],2],[[2,2],2],[[2,16],2],[[2,9],2],[[2,10],2],[[2,13],2],[[2,15],2],[[2,8],2],[[2,12],2],[[2,16],2],[[2,6],2],[[2,8],2],[[2,11],2],[[2,15],2],[[2,9],2],[[2,2],2],[[2,16],2],[[2,8],2],[[2,7],2],[[2,17],2],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[20,8],20],[[20,13],20],[[20,17],20],[[20,17],20],[[20,6],20],[[20,6],20],[[20,20],20],[[20,8],20],[[20,6],20],[[20,16],20],[[20,14],20],[[20,13],20],[[20,20],20],[[20,16],20],[[20,17],20],[[20,6],20],[[20,16],20],[[20,20],20],[[20,14],20],[[20,16],20],[[20,8],20],[[20,20],20],[[20,13],20],[[20,14],20],[[20,13],20],[[20,14],20],[[20,8],20],[[20,17],20],[[2,8],21],[[2,9],21],[[2,15],21],[[2,10],21],[[2,11],21],[[2,6],21],[[2,2],21],[[2,2],21],[[2,7],21],[[2,13],21],[[2,12],21],[[2,14],21],[[2,17],21],[[2,16],21],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[20,17],21],[[20,13],21],[[20,20],21],[[20,16],21],[[20,14],21],[[20,20],21],[[20,6],21],[[20,8],21],[[[3,[-1]]],-1,4],[[[3,[-1]]],[],[4,5]],[[[3,[-2]]],-1,23,[[24,[-1]]]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[[2,25,[26,[6]]],21],[[20,[26,[6]]],21],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[[-1,-1],-1,[]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],0,[[2,14],27],[[20,14],27],[[2,2],2],[[2,2],2],[[2,2],2],[[2,2],2],[[20,20],20],[[20,20],20],[[20,20],20],[[20,20],20],[[2,2],21],[[2,2],21],[[20,20],21],[[20,20],21],[[2,2],2],[[2,2],2],[[2,2],2],[[2,2],2],[[20,20],20],[[20,20],20],[[20,20],20],[[20,20],20],[[2,2],21],[[2,2],21],[[20,20],21],[[20,20],21],[2,14],[20,14],[[2,2],2],[[2,2],2],[[2,2],2],[[2,2],2],[[20,20],20],[[20,20],20],[[20,20],20],[[20,20],20],[[2,2],21],[[2,2],21],[[20,20],21],[[20,20],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[28,[-2]]],29,29],[-1,-1,[]],[2,2],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[20,20],[20,20],[-1,-1,[]],[[-1,-1],[[28,[-1]]],[]],[[2,2],[[28,[2]]]],[[2,2],[[28,[2]]]],[[20,20],[[28,[20]]]],[[-1,-1],[[28,[-1]]],[]],[[2,2],[[28,[2]]]],[[2,2],[[28,[2]]]],[[20,20],[[28,[20]]]],[[2,2],[[28,[2]]]],[[20,20],[[28,[20]]]],[[-1,-1],[[28,[-1]]],[]],[[2,2],[[28,[2]]]],[[2,2],[[28,[2]]]],[[20,20],[[28,[20]]]],[[-1,13],[[28,[-1]]],[18,30,31]],[[2,2],[[28,[2]]]],[[20,20],[[28,[20]]]],[[-1,-1],[[28,[-1]]],[]],[[2,2],[[28,[2]]]],[[2,2],[[28,[2]]]],[[20,20],[[28,[20]]]],[-1,[[3,[-1]]],4],[[-1,-1,-1],-1,32],[-1,33,[]],[2,2],[[[3,[-1]]],[[3,[-1]]],18],[20,20],[[2,2],21],[[20,20],21],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[2,2],34],[[20,20],34],0,[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],[18,19,35]],[[-1,-1],-1,[]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[-1,6,[]],[20,14],[-1,6,[]],[[],2],[[],[[3,[-1]]],36],[[],20],[[2,13],2],[[2,11],2],[[2,10],2],[[2,8],2],[[2,6],2],[[2,8],2],[[2,17],2],[[2,9],2],[[2,14],2],[[2,2],2],[[2,11],2],[[2,16],2],[[2,10],2],[[2,17],2],[[2,8],2],[[2,7],2],[[2,10],2],[[2,12],2],[[2,2],2],[[2,17],2],[[2,9],2],[[2,17],2],[[2,15],2],[[2,7],2],[[2,15],2],[[2,14],2],[[2,13],2],[[2,6],2],[[2,15],2],[[2,14],2],[[2,16],2],[[2,12],2],[[2,2],2],[[2,6],2],[[2,12],2],[[2,7],2],[[2,13],2],[[2,9],2],[[2,7],2],[[2,8],2],[[2,11],2],[[2,16],2],[[2,15],2],[[2,16],2],[[2,2],2],[[2,10],2],[[2,13],2],[[2,6],2],[[2,11],2],[[2,9],2],[[2,12],2],[[2,14],2],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[20,8],20],[[20,20],20],[[20,20],20],[[20,8],20],[[20,13],20],[[20,6],20],[[20,13],20],[[20,13],20],[[20,16],20],[[20,17],20],[[20,16],20],[[20,20],20],[[20,6],20],[[20,17],20],[[20,8],20],[[20,16],20],[[20,13],20],[[20,14],20],[[20,14],20],[[20,17],20],[[20,20],20],[[20,16],20],[[20,8],20],[[20,14],20],[[20,6],20],[[20,6],20],[[20,14],20],[[20,17],20],[[2,9],21],[[2,10],21],[[2,2],21],[[2,17],21],[[2,7],21],[[2,13],21],[[2,12],21],[[2,14],21],[[2,2],21],[[2,15],21],[[2,6],21],[[2,8],21],[[2,11],21],[[2,16],21],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[20,20],21],[[20,6],21],[[20,14],21],[[20,8],21],[[20,20],21],[[20,13],21],[[20,16],21],[[20,17],21],[[-1,-1],-1,[]],[[2,2],2],[[20,20],20],[[2,2],2],[[20,20],20],[[-1,-1],-1,[]],[[2,2],2],[[20,20],20],[[-1,-1],[[21,[-1,-1]]],[]],[[2,2],[[21,[2,2]]]],[[20,20],[[21,[20,20]]]],[[-1,-1],[[21,[-1,-1]]],[]],[[2,2],[[21,[2,2]]]],[[20,20],[[21,[20,20]]]],[[-1,-1],27,[]],[[2,2],27],[[20,20],27],[[],-1,[]],[[2,2],27],[[[3,[-1]],[3,[-1]]],27,[]],[[20,20],27],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,-1,[]],[[[3,[-1]],-1],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[-1,-1],[[37,[-1]]],18],[[-1,-1],[[21,[[37,[-1]],-1]]],[18,1]],[[2,2],[[21,[[37,[2]],2]]]],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[-1,-1,[]],[[2,38],[[40,[21,39]]]],[[2,38],[[40,[21,39]]]],[[2,38],[[40,[21,39]]]],[[2,38],[[40,[21,39]]]],[[2,38],[[40,[21,39]]]],[[2,38],[[40,[21,39]]]],[[[3,[-1]],38],[[40,[21,39]]],41],[[[3,[-1]],38],[[40,[21,39]]],[]],[[[3,[-1]],38],[[40,[21,39]]],[]],[[[3,[-1]],38],[[40,[21,39]]],[]],[[[3,[-1]],38],[[40,[21,39]]],[]],[[[3,[-1]],38],[[40,[21,39]]],[]],[[[3,[-1]],38],[[40,[21,39]]],[]],[[[3,[-1]],38],[[40,[21,39]]],[]],[[20,38],[[40,[21,39]]]],[[20,38],[[40,[21,39]]]],[[20,38],[[40,[21,39]]]],[[20,38],[[40,[21,39]]]],[[20,38],[[40,[21,39]]]],[[20,38],[[40,[21,39]]]],[-1,-1,[]],[-1,[[28,[-2]]],42,[]],[-1,-1,[]],[9,2],[16,2],[8,2],[20,2],[13,2],[11,2],[7,2],[12,2],[14,2],[17,2],[15,2],[27,2],[10,2],[6,2],[-1,[[28,[[3,[-2]]]]],42,[29,19]],[-1,[[3,[-1]]],[18,19]],[-1,-1,[]],[-1,[[3,[-1]]],[18,19]],[17,20],[8,20],[6,20],[13,20],[14,20],[16,20],[-1,-1,[]],[27,20],[-1,-1,[]],[[],2],[[],20],[[25,20],2],[[25,[26,[16]]],2],[[[26,[16]]],20],[[25,[26,[16]]],2],[[[26,[16]]],20],[43,[[28,[-1]]],[]],[43,[[28,[[3,[-1]]]]],[44,19]],[45,[[28,[-1]]],[]],[45,[[28,[2]]]],[45,[[28,[[3,[-1]]]]],[44,19]],[45,[[28,[20]]]],[12,[[28,[-1]]],[]],[12,[[28,[2]]]],[12,[[28,[[3,[-1]]]]],[44,19]],[12,[[28,[20]]]],[15,[[28,[-1]]],[]],[15,[[28,[[3,[-1]]]]],[44,19]],[9,[[28,[-1]]],[]],[9,[[28,[[3,[-1]]]]],[44,19]],[11,[[28,[-1]]],[]],[11,[[28,[2]]]],[11,[[28,[[3,[-1]]]]],[44,19]],[11,[[28,[20]]]],[10,[[28,[-1]]],[]],[10,[[28,[[3,[-1]]]]],[44,19]],[7,[[28,[-1]]],[]],[7,[[28,[[3,[-1]]]]],[44,19]],[-1,-1,[]],[[],2],[[],20],[[-1,-1],[[3,[-1]]],4],[[25,[26,[16]],6],[[28,[2]]]],[[[26,[16]],6],[[28,[20]]]],[[25,[26,[16]],6],[[28,[2]]]],[[[26,[16]],6],[[28,[20]]]],[[[26,[16]]],2],[[[26,[16]]],2],[[25,[26,[6]]],2],[[[26,[6]]],20],[46,[[40,[2,47]]]],[46,[[40,[[3,[-1]]]]],[48,19,18]],[46,[[40,[20,47]]]],[[46,6],[[40,[-1]]],[]],[[46,6],[[40,[2,47]]]],[[46,6],[[40,[[3,[-1]]]]],[19,18]],[[46,6],[[40,[20,47]]]],[17,[[28,[-1]]],[]],[17,[[28,[2]]]],[17,[[28,[[3,[-1]]]]],[44,19]],[17,[[28,[20]]]],[8,[[28,[-1]]],[]],[8,[[28,[[3,[-1]]]]],[44,19]],[6,[[28,[-1]]],[]],[6,[[28,[[3,[-1]]]]],[44,19]],[14,[[28,[-1]]],[]],[14,[[28,[2]]]],[14,[[28,[[3,[-1]]]]],[44,19]],[14,[[28,[20]]]],[16,[[28,[-1]]],[]],[16,[[28,[[3,[-1]]]]],[44,19]],[13,[[28,[-1]]],[]],[13,[[28,[[3,[-1]]]]],[44,19]],[[-1,-1],-1,[]],[[2,2],2],[[20,20],20],[[-1,-1],[[21,[-1,-1]]],[]],[[2,2],[[21,[2,2]]]],[[20,20],[[21,[20,20]]]],[[2,-1],21,49],[[[3,[-1]],-2],21,50,49],[[20,-1],21,49],[[-1,-1],-1,[]],[[],[[3,[-1]]],[18,19]],[[[3,[-1]]],[],[4,5]],0,[[],-1,[]],0,[-1,[[21,[14,15,10]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[21,[25,20]]]],[[[3,[-1]]],[[3,[-1]]],[18,19,35]],[[[3,[-1]]],[],[18,19,35]],[[[3,[-1]]],[],[18,19,35]],[-1,27,[]],[2,27],[20,27],[-1,27,[]],[[[3,[-1]]],27,51],[[[3,[-1]]],27,[4,5]],[-1,27,[]],[[[3,[-1]]],27,51],[[[3,[-1]]],27,[4,5]],[[-1,-1],27,[]],[[2,2],27],[[20,20],27],[-1,27,[]],[[[3,[-1]]],27,[4,5]],[[[3,[-1]]],27,51],[-1,27,[]],[2,27],[-1,27,[]],[[[3,[-1]]],27,[4,5]],[[[3,[-1]]],27,51],[-1,27,[]],[2,27],[20,27],[-1,27,52],[2,27],[[[3,[-1]]],27,[18,19]],[20,27],[-1,27,[]],[2,27],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[2,27],[[[3,[-1]]],27,[18,19]],[20,27],0,[2,53],[20,53],[2,54],[20,54],[[[3,[-1]]],[],[4,5]],[[[3,[-1]]],-1,[18,1]],[[-1,-1],-1,[]],[[2,2],2],[[20,20],20],[-1,6,[]],[-1,6,[]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,-1,[]],[[-1,-1],-1,[]],[[[3,[-1]],-1],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[2,20],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[2,2],2],[[20,20],20],[[2,2,2],2],[[20,20,20],20],[[2,2],2],[[2,16],2],[[2,8],2],[[2,6],2],[[2,10],2],[[2,8],2],[[2,8],2],[[2,13],2],[[2,2],2],[[2,12],2],[[2,13],2],[[2,7],2],[[2,14],2],[[2,9],2],[[2,6],2],[[2,17],2],[[2,15],2],[[2,17],2],[[2,15],2],[[2,10],2],[[2,13],2],[[2,12],2],[[2,7],2],[[2,10],2],[[2,6],2],[[2,12],2],[[2,15],2],[[2,15],2],[[2,9],2],[[2,13],2],[[2,11],2],[[2,9],2],[[2,12],2],[[2,14],2],[[2,8],2],[[2,16],2],[[2,17],2],[[2,6],2],[[2,16],2],[[2,7],2],[[2,11],2],[[2,10],2],[[2,2],2],[[2,14],2],[[2,7],2],[[2,2],2],[[2,16],2],[[2,14],2],[[2,11],2],[[2,9],2],[[2,17],2],[[2,11],2],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[20,20],20],[[20,17],20],[[20,6],20],[[20,14],20],[[20,8],20],[[20,6],20],[[20,20],20],[[20,16],20],[[20,13],20],[[20,13],20],[[20,8],20],[[20,14],20],[[20,8],20],[[20,17],20],[[20,13],20],[[20,17],20],[[20,20],20],[[20,8],20],[[20,16],20],[[20,20],20],[[20,14],20],[[20,17],20],[[20,14],20],[[20,6],20],[[20,16],20],[[20,16],20],[[20,6],20],[[20,13],20],[[-1,-1,-1],-1,[]],[[[3,[-1]],[3,[-1]],[3,[-1]]],[[3,[-1]]],[]],[[[3,[-1]],[3,[-1]],[3,[-1]]],[[3,[-1]]],[]],[[[3,[-1]],[3,[-1]],[3,[-1]]],21,[]],[[[3,[-1]],[3,[-1]],[3,[-1]]],21,[]],[[2,12],21],[[2,15],21],[[2,2],21],[[2,16],21],[[2,13],21],[[2,10],21],[[2,11],21],[[2,7],21],[[2,14],21],[[2,9],21],[[2,6],21],[[2,2],21],[[2,8],21],[[2,17],21],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[20,13],21],[[20,6],21],[[20,14],21],[[20,8],21],[[20,20],21],[[20,20],21],[[20,16],21],[[20,17],21],[[],-1,[]],[2,2],[2,2],[[[3,[-1]]],[],[18,19,35]],[[[3,[-1]]],[],[18,19,35]],[[],-1,[]],[[],-1,[]],[[25,[56,[6,55]]],2],[[-1,-1],[[3,[-1]]],[]],[[[56,[6,55]]],20],[[-1,-1],-1,18],[[2,2],2],[[20,20],20],[[[3,[-1]]],-1,4],[[[3,[-1]]],-1,[18,19]],[2,2],[2,2],[[2,6],2],[[2,6],2],[[20,6],20],[[20,6],20],[[],-1,30],[[],-1,[]],[[],2],[[],[[3,[-1]]],[18,19]],[[],20],[[[26,[16]],6],[[28,[2]]]],[[[26,[16]],6],[[28,[20]]]],[[2,2],[[28,[34]]]],[[20,20],[[28,[34]]]],0,[[-1,13],-1,[18,30,57]],[[-1,6],-1,[]],[[2,17],2],[[2,20],2],[[2,6],2],[[2,20],2],[[2,16],2],[[2,8],2],[[2,6],2],[[2,17],2],[[2,16],2],[[2,14],2],[[2,13],2],[[2,13],2],[[2,13],2],[[2,20],2],[[2,16],2],[[2,14],2],[[2,13],2],[[2,17],2],[[2,17],2],[[2,8],2],[[2,8],2],[[2,20],2],[[2,6],2],[[2,14],2],[[2,14],2],[[2,6],2],[[2,16],2],[[2,6],2],[[2,8],2],[[[3,[-1]],[3,[-1]]],[],4],[[[3,[-1]],14],[],[18,19]],[[[3,[-1]],12],[],[18,19,35]],[[[3,[-1]],13],[],[18,19]],[[[3,[-1]],6],[],[18,19]],[[[3,[-1]],16],[],[18,19]],[[[3,[-1]],6],[],[18,19]],[[[3,[-1]],45],[],4],[[[3,[-1]],11],[],[18,19,35]],[[[3,[-1]],45],[],4],[[[3,[-1]],45],[],4],[[[3,[-1]],[3,[-1]]],[],4],[[[3,[-1]],10],[],[18,19,35]],[[[3,[-1]],8],[],[18,19]],[[[3,[-1]],7],[],[18,19,35]],[[[3,[-1]],9],[],[18,19,35]],[[[3,[-1]],43],[],4],[[[3,[-1]],43],[],4],[[[3,[-1]],13],[],[18,19]],[[[3,[-1]],45],[],4],[[[3,[-1]],15],[],[18,19,35]],[[[3,[-1]],17],[],[18,19]],[[[3,[-1]],9],[],[18,19,35]],[[[3,[-1]],[3,[-1]]],[],4],[[[3,[-1]],43],[],4],[[[3,[-1]],43],[],4],[[[3,[-1]],[3,[-1]]],[],4],[[[3,[-1]],7],[],[18,19,35]],[[[3,[-1]],17],[],[18,19]],[[[3,[-1]],12],[],[18,19,35]],[[[3,[-1]],11],[],[18,19,35]],[[[3,[-1]],10],[],[18,19,35]],[[[3,[-1]],15],[],[18,19,35]],[[[3,[-1]],8],[],[18,19]],[[[3,[-1]],16],[],[18,19]],[[[3,[-1]],14],[],[18,19]],[[20,20],20],[[20,8],20],[[20,8],20],[[20,17],20],[[20,6],20],[[20,6],20],[[20,16],20],[[20,20],20],[[20,8],20],[[20,14],20],[[20,16],20],[[20,14],20],[[20,20],20],[[20,17],20],[[20,6],20],[[20,14],20],[[20,6],20],[[20,13],20],[[20,20],20],[[20,8],20],[[20,17],20],[[20,16],20],[[20,16],20],[[20,13],20],[[20,13],20],[[20,14],20],[[20,13],20],[[20,6],20],[[20,17],20],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]],3],3,[4,5]],[[-1,-1],-1,[]],[[[3,[-1]],-1],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[-1,9],-1,[]],[[[3,[-1]],9],[[3,[-1]]],[18,19,35]],[[[3,[-1]],9],[[3,[-1]]],[4,5]],[[[3,[-1]],6],[[3,[-1]]],[18,19]],[[-1,-1],-1,18],[[2,2],2],[[20,20],20],[-1,2,58],[-1,[[3,[-2]]],58,[19,18]],[-1,[[3,[-2]]],58,[19,18]],[-1,20,58],[[-1,-1],[[59,[-1]]],[60,32,18,30]],[[-1,-1],[[61,[-1]]],[60,32,18,30]],[[-1,-1,-1],[[62,[-1]]],[63,32,18,64]],[[-1,-1,-1],[[65,[-1]]],[63,32,18,64]],0,[[[3,[-1]]],[],[4,5]],0,[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[2,17],2],[[2,13],2],[[2,11],2],[[2,6],2],[[2,11],2],[[2,10],2],[[2,9],2],[[2,15],2],[[2,7],2],[[2,12],2],[[2,8],2],[[2,7],2],[[2,16],2],[[2,15],2],[[2,2],2],[[2,17],2],[[2,16],2],[[2,6],2],[[2,12],2],[[2,16],2],[[2,7],2],[[2,13],2],[[2,2],2],[[2,10],2],[[2,14],2],[[2,13],2],[[2,12],2],[[2,9],2],[[2,8],2],[[2,17],2],[[2,15],2],[[2,12],2],[[2,6],2],[[2,7],2],[[2,8],2],[[2,14],2],[[2,9],2],[[2,14],2],[[2,11],2],[[2,16],2],[[2,14],2],[[2,15],2],[[2,2],2],[[2,8],2],[[2,11],2],[[2,9],2],[[2,2],2],[[2,10],2],[[2,6],2],[[2,10],2],[[2,13],2],[[2,17],2],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[20,17],20],[[20,20],20],[[20,6],20],[[20,20],20],[[20,6],20],[[20,13],20],[[20,14],20],[[20,13],20],[[20,16],20],[[20,16],20],[[20,17],20],[[20,14],20],[[20,8],20],[[20,16],20],[[20,17],20],[[20,13],20],[[20,14],20],[[20,14],20],[[20,20],20],[[20,8],20],[[20,20],20],[[20,8],20],[[20,6],20],[[20,13],20],[[20,16],20],[[20,6],20],[[20,17],20],[[20,8],20],[[2,17],21],[[2,14],21],[[2,9],21],[[2,7],21],[[2,15],21],[[2,13],21],[[2,10],21],[[2,6],21],[[2,2],21],[[2,11],21],[[2,8],21],[[2,16],21],[[2,12],21],[[2,2],21],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[20,14],21],[[20,20],21],[[20,6],21],[[20,8],21],[[20,20],21],[[20,13],21],[[20,16],21],[[20,17],21],[[2,2],2],[[20,20],20],[-1,-1,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[3,[-1]],-1],[[3,[-1]]],[18,19]],[[2,14,27],21],[[20,14,27],21],[-1,21,[]],[2,21],[[[3,[-1]]],21,[18,19]],[20,21],[-1,21,[]],[2,21],[[[3,[-1]]],21,[18,19]],[20,21],[[2,14],2],[[2,9],2],[[2,11],2],[[2,9],2],[[2,17],2],[[2,15],2],[[2,6],2],[[2,17],2],[[2,10],2],[[2,6],2],[[2,14],2],[[2,7],2],[[2,13],2],[[2,9],2],[[2,17],2],[[2,11],2],[[2,11],2],[[2,14],2],[[2,12],2],[[2,10],2],[[2,8],2],[[2,13],2],[[2,13],2],[[2,7],2],[[2,12],2],[[2,12],2],[[2,8],2],[[2,7],2],[[2,17],2],[[2,6],2],[[2,8],2],[[2,16],2],[[2,16],2],[[2,13],2],[[2,7],2],[[2,15],2],[[2,12],2],[[2,16],2],[[2,8],2],[[2,14],2],[[2,9],2],[[2,10],2],[[2,15],2],[[2,10],2],[[2,15],2],[[2,11],2],[[2,6],2],[[2,16],2],[[20,14],20],[[20,17],20],[[20,13],20],[[20,6],20],[[20,10],20],[[20,13],20],[[20,8],20],[[20,10],20],[[20,12],20],[[20,10],20],[[20,12],20],[[20,7],20],[[20,8],20],[[20,16],20],[[20,15],20],[[20,11],20],[[20,6],20],[[20,16],20],[[20,6],20],[[20,16],20],[[20,9],20],[[20,17],20],[[20,7],20],[[20,14],20],[[20,8],20],[[20,17],20],[[20,8],20],[[20,17],20],[[20,15],20],[[20,7],20],[[20,10],20],[[20,9],20],[[20,6],20],[[20,14],20],[[20,15],20],[[20,15],20],[[20,12],20],[[20,13],20],[[20,11],20],[[20,11],20],[[20,9],20],[[20,12],20],[[20,9],20],[[20,16],20],[[20,14],20],[[20,7],20],[[20,11],20],[[20,13],20],[[2,7],21],[[2,17],21],[[2,17],21],[[2,13],21],[[2,11],21],[[2,10],21],[[2,9],21],[[2,16],21],[[2,13],21],[[2,12],21],[[2,9],21],[[2,8],21],[[2,12],21],[[2,10],21],[[2,16],21],[[2,7],21],[[2,14],21],[[2,15],21],[[2,6],21],[[2,15],21],[[2,6],21],[[2,8],21],[[2,14],21],[[2,11],21],[[20,17],21],[[20,12],21],[[20,10],21],[[20,16],21],[[20,7],21],[[20,13],21],[[20,8],21],[[20,14],21],[[20,9],21],[[20,12],21],[[20,11],21],[[20,10],21],[[20,16],21],[[20,6],21],[[20,17],21],[[20,6],21],[[20,13],21],[[20,9],21],[[20,11],21],[[20,7],21],[[20,14],21],[[20,8],21],[[20,15],21],[[20,15],21],[[2,12],2],[[2,15],2],[[2,11],2],[[2,13],2],[[2,17],2],[[2,10],2],[[2,9],2],[[2,6],2],[[2,7],2],[[2,16],2],[[2,8],2],[[2,11],2],[[2,8],2],[[2,14],2],[[2,14],2],[[2,11],2],[[2,7],2],[[2,15],2],[[2,15],2],[[2,6],2],[[2,10],2],[[2,9],2],[[2,16],2],[[2,17],2],[[2,14],2],[[2,9],2],[[2,8],2],[[2,7],2],[[2,14],2],[[2,12],2],[[2,10],2],[[2,7],2],[[2,17],2],[[2,16],2],[[2,16],2],[[2,11],2],[[2,6],2],[[2,9],2],[[2,8],2],[[2,13],2],[[2,15],2],[[2,17],2],[[2,12],2],[[2,6],2],[[2,10],2],[[2,13],2],[[2,12],2],[[2,13],2],[[20,11],20],[[20,15],20],[[20,14],20],[[20,13],20],[[20,6],20],[[20,17],20],[[20,6],20],[[20,6],20],[[20,11],20],[[20,14],20],[[20,8],20],[[20,8],20],[[20,11],20],[[20,13],20],[[20,8],20],[[20,7],20],[[20,11],20],[[20,10],20],[[20,9],20],[[20,12],20],[[20,16],20],[[20,7],20],[[20,9],20],[[20,12],20],[[20,13],20],[[20,14],20],[[20,7],20],[[20,17],20],[[20,9],20],[[20,17],20],[[20,15],20],[[20,9],20],[[20,15],20],[[20,10],20],[[20,12],20],[[20,14],20],[[20,12],20],[[20,16],20],[[20,8],20],[[20,7],20],[[20,13],20],[[20,10],20],[[20,16],20],[[20,17],20],[[20,6],20],[[20,16],20],[[20,15],20],[[20,10],20],[[2,13],21],[[2,11],21],[[2,6],21],[[2,15],21],[[2,8],21],[[2,14],21],[[2,12],21],[[2,12],21],[[2,8],21],[[2,13],21],[[2,6],21],[[2,10],21],[[2,17],21],[[2,14],21],[[2,17],21],[[2,7],21],[[2,11],21],[[2,9],21],[[2,9],21],[[2,16],21],[[2,16],21],[[2,15],21],[[2,10],21],[[2,7],21],[[20,13],21],[[20,17],21],[[20,12],21],[[20,13],21],[[20,7],21],[[20,10],21],[[20,9],21],[[20,16],21],[[20,15],21],[[20,14],21],[[20,8],21],[[20,6],21],[[20,12],21],[[20,8],21],[[20,9],21],[[20,14],21],[[20,11],21],[[20,6],21],[[20,17],21],[[20,15],21],[[20,11],21],[[20,16],21],[[20,7],21],[[20,10],21],[2,25],[[-1,6],-1,[]],[[-1,6],-1,[]],[-1,-1,1],[-1,-1,[]],[-1,-1,[]],[2,2],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,[[21,[-1,-1]]],[]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[-1,-1,[]],[2,2],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[20,20],[20,20],[[2,12],2],[[2,11],2],[[2,9],2],[[2,6],2],[[2,6],2],[[2,12],2],[[2,16],2],[[2,8],2],[[2,15],2],[[2,2],2],[[2,11],2],[[2,7],2],[[2,14],2],[[2,16],2],[[2,15],2],[[2,8],2],[[2,9],2],[[2,15],2],[[2,17],2],[[2,15],2],[[2,17],2],[[2,11],2],[[2,6],2],[[2,12],2],[[2,11],2],[[2,2],2],[[2,16],2],[[2,10],2],[[2,14],2],[[2,7],2],[[2,6],2],[[2,8],2],[[2,9],2],[[2,14],2],[[2,12],2],[[2,9],2],[[2,13],2],[[2,2],2],[[2,16],2],[[2,14],2],[[2,10],2],[[2,17],2],[[2,10],2],[[2,7],2],[[2,13],2],[[2,13],2],[[2,13],2],[[2,2],2],[[2,8],2],[[2,17],2],[[2,10],2],[[2,7],2],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],-1],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[[3,[-1]],[3,[-1]]],[],[18,19]],[[20,6],20],[[20,6],20],[[20,14],20],[[20,14],20],[[20,20],20],[[20,13],20],[[20,20],20],[[20,20],20],[[20,13],20],[[20,6],20],[[20,17],20],[[20,6],20],[[20,16],20],[[20,17],20],[[20,16],20],[[20,13],20],[[20,8],20],[[20,16],20],[[20,16],20],[[20,17],20],[[20,8],20],[[20,13],20],[[20,8],20],[[20,14],20],[[20,17],20],[[20,14],20],[[20,8],20],[[20,20],20],[[2,16],21],[[2,2],21],[[2,10],21],[[2,2],21],[[2,11],21],[[2,15],21],[[2,6],21],[[2,8],21],[[2,14],21],[[2,9],21],[[2,17],21],[[2,12],21],[[2,13],21],[[2,7],21],[[[3,[-1]],-1],21,[18,22]],[[[3,[-1]],-1],21,[18,22]],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[[3,[-1]],[3,[-1]]],21,[18,22]],[[20,13],21],[[20,20],21],[[20,20],21],[[20,8],21],[[20,6],21],[[20,17],21],[[20,14],21],[[20,16],21],[-1,2,58],[-1,[[3,[-2]]],58,[19,18]],[-1,[[3,[-2]]],58,[19,18]],[-1,20,58],[-1,-1,[]],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],4],[-1,-1,[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],[4,5]],[-1,-1,[]],[2],[20],[2,[[28,[2]]]],[20,[[28,[2]]]],[2,[[28,[20]]]],[2,[[28,[20]]]],[20,[[28,[20]]]],[2,[[21,[25,[56,[16,55]]]]]],[20,[[56,[16,55]]]],[2,[[21,[25,[56,[16,55]]]]]],[20,[[56,[16,55]]]],[-1,-1,[]],[-1,[[28,[43]]],[]],[2,[[28,[43]]]],[[[3,[-1]]],[[28,[43]]],[42,19]],[20,[[28,[43]]]],[-1,[[28,[45]]],[]],[2,[[28,[45]]]],[[[3,[-1]]],[[28,[45]]],[42,19]],[20,[[28,[45]]]],[-1,[[28,[12]]],[]],[2,[[28,[12]]]],[[[3,[-1]]],[[28,[12]]],[42,19]],[20,[[28,[12]]]],[-1,[[28,[15]]],[]],[[[3,[-1]]],[[28,[15]]],[42,19]],[-1,[[28,[9]]],[]],[[[3,[-1]]],[[28,[9]]],[42,19]],[-1,[[28,[11]]],[]],[2,[[28,[11]]]],[[[3,[-1]]],[[28,[11]]],[42,19]],[20,[[28,[11]]]],[-1,[[28,[10]]],[]],[[[3,[-1]]],[[28,[10]]],[42,19]],[-1,[[28,[7]]],[]],[[[3,[-1]]],[[28,[7]]],[42,19]],[-1,-1,[]],[2],[20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],[[21,[-1,-1]]],4],[-1,-1,[]],[[2,6],[[21,[25,[56,[16,55]]]]]],[[20,6],[[56,[16,55]]]],[[2,6],[[21,[25,[56,[16,55]]]]]],[[20,6],[[56,[16,55]]]],[2,[[56,[16,55]]]],[2,[[56,[16,55]]]],[[2,6],66],[[20,6],66],[-1,66,[]],[-1,66,[]],[-1,66,[]],[-1,[[28,[17]]],[]],[2,[[28,[17]]]],[[[3,[-1]]],[[28,[17]]],[42,19]],[20,[[28,[17]]]],[-1,[[28,[8]]],[]],[[[3,[-1]]],[[28,[8]]],[42,19]],[-1,[[28,[6]]],[]],[[[3,[-1]]],[[28,[6]]],[42,19]],[2,[[21,[25,[56,[6,55]]]]]],[20,[[56,[6,55]]]],[-1,[[28,[14]]],[]],[2,[[28,[14]]]],[[[3,[-1]]],[[28,[14]]],[42,19]],[20,[[28,[14]]]],[2,[[21,[25,[56,[14,55]]]]]],[20,[[56,[14,55]]]],[-1,[[28,[16]]],[]],[[[3,[-1]]],[[28,[16]]],[42,19]],[-1,[[28,[13]]],[]],[[[3,[-1]]],[[28,[13]]],[42,19]],[-1,6,[]],[20,14],[-1,6,[]],[2,[[28,[14]]]],[20,[[28,[14]]]],0,[-1,-1,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[7,[[40,[20,[67,[21]]]]]],[-1,[[40,[-2]]],[],[]],[2,[[40,[20,[67,[2]]]]]],[12,[[40,[20,[67,[21]]]]]],[15,[[40,[20,[67,[21]]]]]],[11,[[40,[20,[67,[21]]]]]],[9,[[40,[20,[67,[21]]]]]],[10,[[40,[20,[67,[21]]]]]],[2,[[40,[20,[67,[21]]]]]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[[[3,[-1]],-1],[[3,[-1]]],[18,19]],[[-1,6],-1,[]],[[-1,6],-1,[]],[[],-1,64],[[],-1,[]],[[],2],[[],[[3,[-1]]],[18,19]],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[47,47],[[[67,[-1]]],[[67,[-1]]],18],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[25,25],34],[53,13],[54,13],[47,46],[[[67,[-1]]],46,41],[[25,25],27],[[47,47],27],[[[67,[-1]],[67,[-1]]],27,[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[-1,-2],27,[],[]],[[25,38],[[40,[21,39]]]],[[47,38],[[40,[21,39]]]],[[47,38],[[40,[21,39]]]],[[[67,[-1]],38],[[40,[21,39]]],41],[[[67,[-1]],38],[[40,[21,39]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[25,-1],21,49],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1]]],-1,[]],[53,[[28,[6]]]],[54,[[28,[14]]]],[53,13],[54,13],[[25,25],25],[25,25],[53,[[28,[6]]]],[54,[[28,[14]]]],[53,28],[54,28],[[54,13],[[28,[14]]]],[[25,25],[[28,[34]]]],[53,[[21,[13,[28,[13]]]]]],[54,[[21,[13,[28,[13]]]]]],[-1,[[28,[2]]],[]],[-1,[[28,[20]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,66,[]],[-1,66,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],0,0,0,0,[-1,-2,[],[]],[-1,[[28,[-2]]],29,29],[-1,[[28,[-2]]],42,[]],[43,[[28,[-1]]],[]],[45,[[28,[-1]]],[]],[12,[[28,[-1]]],[]],[15,[[28,[-1]]],[]],[9,[[28,[-1]]],[]],[11,[[28,[-1]]],[]],[10,[[28,[-1]]],[]],[7,[[28,[-1]]],[]],[17,[[28,[-1]]],[]],[8,[[28,[-1]]],[]],[6,[[28,[-1]]],[]],[14,[[28,[-1]]],[]],[16,[[28,[-1]]],[]],[13,[[28,[-1]]],[]],[-1,[[28,[43]]],[]],[-1,[[28,[45]]],[]],[-1,[[28,[12]]],[]],[-1,[[28,[15]]],[]],[-1,[[28,[9]]],[]],[-1,[[28,[11]]],[]],[-1,[[28,[10]]],[]],[-1,[[28,[7]]],[]],[-1,[[28,[17]]],[]],[-1,[[28,[8]]],[]],[-1,[[28,[6]]],[]],[-1,[[28,[14]]],[]],[-1,[[28,[16]]],[]],[-1,[[28,[13]]],[]],0,0,0,0,0,0,[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[69,[-1]]],46,70],[[[69,[-1]],[69,[-1]]],27,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[69,[-1]],38],[[40,[21,39]]],41],[[[69,[-1]],38],[[40,[21,39]]],71],[-1,-1,[]],[-1,[],[]],0,0,0,[-1,-2,[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,3],3,[]],[-1,-1,[]],[[-1,9],-1,[]],[-1,[],[]],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,66,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,68,[]],0,0,0,0,0,[[-1,-1],-1,72],[[-1,-1],-1,[]],[[-1,-1],-1,72],[[-1,-1],-1,[]],[[-1,-1],-1,[73,18]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,74],[-1,-1,[]],[[[37,[-1]]],[[37,[-1]]],18],[[-1,-2],21,[],[]],[[-1,-1],-1,73],[[-1,-1],-1,[]],[[-1,-1],-1,73],[[-1,-1],-1,[]],[[-1,-1],[[21,[-1,-1]]],73],[[-1,-1],[[21,[-1,-1]]],[]],[[-1,-1],[[21,[-1,-1]]],73],[[-1,-1],[[21,[-1,-1]]],[]],[[-1,-1],27,[]],[[[37,[-1]],[37,[-1]]],27,[]],[[-1,-2],27,[],[]],[[-1,-1],[[37,[-1]]],18],[[-1,-1],[[21,[[37,[-1]],-1]]],[18,1]],[[[37,[-1]],38],[[40,[21,39]]],41],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,73],[[-1,-1],-1,[]],0,[[-1,-1],[[21,[-1,-1]]],73],[[-1,-1],[[21,[-1,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,27,[]],[[-1,-1],27,[]],[-1,27,[]],[[-1,-1],-1,73],[[-1,-1],-1,[]],[[-1,-1],-1,73],[[-1,-1],-1,[]],[[[26,[-1]]],-1,[]],[-1,[[75,[-1]]],73],[[[75,[-1]]],[[28,[-1]]],[73,18]],[[-1,-1],-1,18],[[-1,6],-1,74],[[-1,6],-1,[]],[[-1,-1],-1,18],[-1,-1,74],[-1,-1,[]],[-1,-2,[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,68,[]],[-1,68,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[59,[-1]]],[[59,[-1]]],18],[[[61,[-1]]],[[61,[-1]]],18],[[[62,[-1]]],[[62,[-1]]],18],[[[65,[-1]]],[[65,[-1]]],18],[[[76,[-1]]],[[76,[-1]]],18],[[[77,[-1]]],[[77,[-1]]],18],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[[59,[-1]]],[[78,[-1]]],[]],[[[61,[-1]]],[[78,[-1]]],[]],[[[76,[-1]]],[[78,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[59,[-1]]],[[28,[-1]]],[]],[[[61,[-1]]],[[28,[-1]]],[]],[[[62,[-1]]],[[28,[-1]]],[]],[[[65,[-1]]],[[28,[-1]]],[]],[[[76,[-1]]],[[28,[-1]]],[]],[[[77,[-1]]],[[28,[-1]]],[]],[[[59,[-1]]],[[28,[-1]]],[73,18,42]],[[[61,[-1]]],[[28,[-1]]],[]],[[-1,-1],[[59,[-1]]],[60,32,18,30]],[-1,[[76,[-1]]],[60,18,30]],[[-1,-1],[[61,[-1]]],[60,32,18,30]],[[-1,-1,-1],[[62,[-1]]],[63,32,18,64]],[[-1,-1],[[77,[-1]]],[60,18]],[[-1,-1,-1],[[65,[-1]]],[63,32,18,64]],[[[59,[-1]]],[[21,[13,[28,[13]]]]],[]],[[[61,[-1]]],[[21,[13,[28,[13]]]]],[]],[[[76,[-1]]],[[21,[13,[28,[13]]]]],[]],[[[77,[-1]]],[[21,[13,[28,[13]]]]],[]],[[[59,[-1]]],[[78,[-1]]],[]],[[[61,[-1]]],[[78,[-1]]],[]],[[[76,[-1]]],[[78,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],0,0,[[-1,13],[[28,[-1]]],[18,30,31]],[[-1,13],-1,[18,30,57]],[[-1,-2],[],[],[]],0,0,0,0,0,0,[[[79,[-1]]],[[79,[-1]]],[18,73,1]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73,1]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[-1,[[28,[[79,[-2]]]]],[51,29],[73,1,80,29,18]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[28,[[79,[-1]]]]],[18,73,31,63]],[[[79,[-1]],[79,[-1]]],[[28,[[79,[-1]]]]],[18,73,31]],[[[79,[-1]],[79,[-1]]],[[28,[[79,[-1]]]]],[18,73,31]],[[[79,[-1]],[79,[-1]]],[[28,[[79,[-1]]]]],[18,73,31,81]],[[[79,[-1]]],[[79,[-1]]],18],[82,82],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[[79,[-1]],[79,[-1]]],34,[18,73]],[[],[[79,[-1]]],[18,73]],[[[79,[-1]]],-1,[]],[82,46],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],27,[18,73]],[[82,82],27],[[-1,-2],27,[],[]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],38],[[40,[21,39]]],[83,18,73]],[[[79,[-1]],38],[[40,[21,39]]],[71,18,73]],[[[79,[-1]],38],[[40,[21,39]]],[84,18,73]],[[[79,[-1]],38],[[40,[21,39]]],[85,18,73]],[[[79,[-1]],38],[[40,[21,39]]],41],[[[79,[-1]],38],[[40,[21,39]]],[86,18,73]],[[[79,[-1]],38],[[40,[21,39]]],[87,18,73]],[[[79,[-1]],38],[[40,[21,39]]],[88,18,73]],[[82,38],[[40,[21,39]]]],[[82,38],[[40,[21,39]]]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[-1,-1,[]],[-1,[[79,[-1]]],[18,73]],[[[21,[-1,-1]]],[[79,[-1]]],[18,73]],[-1,-1,[]],[43,[[28,[[79,[14]]]]]],[43,[[28,[[79,[10]]]]]],[43,[[28,[[79,[16]]]]]],[43,[[28,[[79,[8]]]]]],[43,[[28,[[79,[11]]]]]],[43,[[28,[[79,[17]]]]]],[43,[[28,[[79,[12]]]]]],[43,[[28,[[79,[2]]]]]],[43,[[28,[[79,[13]]]]]],[43,[[28,[[79,[6]]]]]],[43,[[28,[[79,[15]]]]]],[43,[[28,[[79,[7]]]]]],[43,[[28,[[79,[9]]]]]],[45,[[28,[[79,[7]]]]]],[45,[[28,[[79,[15]]]]]],[45,[[28,[[79,[14]]]]]],[45,[[28,[[79,[9]]]]]],[45,[[28,[[79,[8]]]]]],[45,[[28,[[79,[13]]]]]],[45,[[28,[[79,[6]]]]]],[45,[[28,[[79,[10]]]]]],[45,[[28,[[79,[12]]]]]],[45,[[28,[[79,[2]]]]]],[45,[[28,[[79,[16]]]]]],[45,[[28,[[79,[11]]]]]],[45,[[28,[[79,[17]]]]]],[-1,[[28,[[79,[2]]]]],51],[12,[[28,[[79,[15]]]]]],[12,[[28,[[79,[6]]]]]],[12,[[28,[[79,[12]]]]]],[12,[[28,[[79,[16]]]]]],[12,[[28,[[79,[2]]]]]],[12,[[28,[[79,[9]]]]]],[12,[[28,[[79,[7]]]]]],[12,[[28,[[79,[11]]]]]],[12,[[28,[[79,[17]]]]]],[12,[[28,[[79,[14]]]]]],[12,[[28,[[79,[13]]]]]],[12,[[28,[[79,[10]]]]]],[12,[[28,[[79,[8]]]]]],[11,[[28,[[79,[14]]]]]],[11,[[28,[[79,[10]]]]]],[11,[[28,[[79,[2]]]]]],[11,[[28,[[79,[8]]]]]],[11,[[28,[[79,[6]]]]]],[11,[[28,[[79,[17]]]]]],[11,[[28,[[79,[13]]]]]],[11,[[28,[[79,[15]]]]]],[11,[[28,[[79,[12]]]]]],[11,[[28,[[79,[9]]]]]],[11,[[28,[[79,[7]]]]]],[11,[[28,[[79,[16]]]]]],[11,[[28,[[79,[11]]]]]],[-1,[[79,[-1]]],[18,73]],[46,[[40,[[79,[-1]],82]]],[48,18,73]],[[46,6],[[40,[[79,[-1]],82]]],[18,73]],[17,[[28,[[79,[11]]]]]],[17,[[28,[[79,[16]]]]]],[17,[[28,[[79,[10]]]]]],[17,[[28,[[79,[12]]]]]],[17,[[28,[[79,[17]]]]]],[17,[[28,[[79,[7]]]]]],[17,[[28,[[79,[14]]]]]],[17,[[28,[[79,[13]]]]]],[17,[[28,[[79,[15]]]]]],[17,[[28,[[79,[6]]]]]],[17,[[28,[[79,[9]]]]]],[17,[[28,[[79,[8]]]]]],[17,[[28,[[79,[2]]]]]],[14,[[28,[[79,[9]]]]]],[14,[[28,[[79,[16]]]]]],[14,[[28,[[79,[6]]]]]],[14,[[28,[[79,[14]]]]]],[14,[[28,[[79,[7]]]]]],[14,[[28,[[79,[15]]]]]],[14,[[28,[[79,[10]]]]]],[14,[[28,[[79,[13]]]]]],[14,[[28,[[79,[2]]]]]],[14,[[28,[[79,[8]]]]]],[14,[[28,[[79,[12]]]]]],[14,[[28,[[79,[17]]]]]],[14,[[28,[[79,[11]]]]]],[[[79,[-1]],-2],21,[18,73,50],49],[[[79,[-1]]],[[21,[-1,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]]],27,[18,73]],[[[79,[-1]]],27,[18,73,1]],[[[79,[-1]]],27,[18,73]],[[[79,[-1]]],27,[18,73,1]],[[[79,[-1]]],27,[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]]],[[79,[-1]]],[18,73,35]],[[[79,[-1]]],[[79,[-1]]],[18,73,35]],[[-1,-1],[[79,[-1]]],[18,73]],[[-1,-1],[[79,[-1]]],[]],[[[79,[-1]]],-1,[]],[[],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[28,[34]]],[18,73]],[[[79,[-1]],13],[[79,[-1]]],[18,73,[89,[13]]]],[[[79,[-1]],7],[[79,[-1]]],[18,73,[89,[13]]]],[[[79,[-1]],8],[[79,[-1]]],[18,73,[89,[8]]]],[[[79,[-1]],14],[[79,[-1]]],[18,73]],[[[79,[-1]],9],[[79,[-1]]],[18,73]],[[[79,[-1]],8],[[79,[-1]]],[18,73,[89,[8]]]],[[[79,[-1]],12],[[79,[-1]]],[18,73]],[[[79,[-1]],15],[[79,[-1]]],[18,73,[89,[8]]]],[[[79,[-1]],10],[[79,[-1]]],[18,73]],[[[79,[-1]],10],[[79,[-1]]],[18,73,[89,[16]]]],[[[79,[-1]],8],[[79,[-1]]],[18,73]],[[[79,[-1]],20],[[79,[-1]]],[18,73,[89,[20]]]],[[[79,[-1]],14],[[79,[-1]]],[18,73,[89,[14]]]],[[[79,[-1]],9],[[79,[-1]]],[18,73,[89,[6]]]],[[[79,[-1]],12],[[79,[-1]]],[18,73]],[[[79,[-1]],2],[[79,[-1]]],[18,73,[89,[20]]]],[[[79,[-1]],15],[[79,[-1]]],[18,73]],[[[79,[-1]],17],[[79,[-1]]],[18,73,[89,[17]]]],[[[79,[-1]],17],[[79,[-1]]],[18,73,[89,[17]]]],[[[79,[-1]],12],[[79,[-1]]],[18,73,[89,[17]]]],[[[79,[-1]],13],[[79,[-1]]],[18,73,[89,[13]]]],[[[79,[-1]],16],[[79,[-1]]],[18,73,[89,[16]]]],[[[79,[-1]],6],[[79,[-1]]],[18,73,[89,[6]]]],[[[79,[-1]],17],[[79,[-1]]],[18,73]],[[[79,[-1]],9],[[79,[-1]]],[18,73,[89,[6]]]],[[[79,[-1]],2],[[79,[-1]]],[18,73]],[[[79,[-1]],16],[[79,[-1]]],[18,73,[89,[16]]]],[[[79,[-1]],6],[[79,[-1]]],[18,73,[89,[6]]]],[[[79,[-1]],6],[[79,[-1]]],[18,73]],[[[79,[-1]],10],[[79,[-1]]],[18,73]],[[[79,[-1]],20],[[79,[-1]]],[18,73]],[[[79,[-1]],8],[[79,[-1]]],[18,73]],[[[79,[-1]],13],[[79,[-1]]],[18,73]],[[[79,[-1]],14],[[79,[-1]]],[18,73]],[[[79,[-1]],20],[[79,[-1]]],[18,73,[89,[20]]]],[[[79,[-1]],9],[[79,[-1]]],[18,73]],[[[79,[-1]],11],[[79,[-1]]],[18,73]],[[[79,[-1]],9],[[79,[-1]]],[18,73]],[[[79,[-1]],7],[[79,[-1]]],[18,73,[89,[13]]]],[[[79,[-1]],12],[[79,[-1]]],[18,73,[89,[17]]]],[[[79,[-1]],6],[[79,[-1]]],[18,73]],[[[79,[-1]],13],[[79,[-1]]],[18,73]],[[[79,[-1]],10],[[79,[-1]]],[18,73,[89,[16]]]],[[[79,[-1]],15],[[79,[-1]]],[18,73]],[[[79,[-1]],2],[[79,[-1]]],[18,73,[89,[20]]]],[[[79,[-1]],16],[[79,[-1]]],[18,73]],[[[79,[-1]],11],[[79,[-1]]],[18,73,[89,[14]]]],[[[79,[-1]],7],[[79,[-1]]],[18,73]],[[[79,[-1]],2],[[79,[-1]]],[18,73]],[[[79,[-1]],14],[[79,[-1]]],[18,73,[89,[14]]]],[[[79,[-1]],15],[[79,[-1]]],[18,73,[89,[8]]]],[[[79,[-1]],11],[[79,[-1]]],[18,73,[89,[14]]]],[[[79,[-1]],17],[[79,[-1]]],[18,73]],[[[79,[-1]],11],[[79,[-1]]],[18,73]],[[[79,[-1]],16],[[79,[-1]]],[18,73]],[[[79,[-1]],7],[[79,[-1]]],[18,73]],[[[79,[-1]],20],[[79,[-1]]],[18,73]],[-1,[[79,[-2]]],58,[73,18]],[-1,[[79,[-2]]],58,[73,18]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]]],21,[18,73]],[[[79,[-1]]],21,[18,73]],[[[79,[-1]]],[[79,[-1]]],[18,73,1]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],[79,[-1]]],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],[[79,[-1]]],[18,73]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[[[79,[-1]],-1],21,[18,73,22]],[[[79,[-1]],[79,[-1]]],21,[18,73,22]],[-1,[[79,[-2]]],58,[73,18]],[-1,[[79,[-2]]],58,[73,18]],[[[79,[-1]]],[[28,[45]]],[18,73,42,90]],[[[79,[-1]]],[[28,[12]]],[18,73,42,90]],[[[79,[-1]]],[[28,[11]]],[18,73,42,90]],[[[79,[-1]]],-1,[18,73]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,66,[]],[-1,66,[]],[[[79,[-1]]],[[28,[17]]],[18,73,42,90]],[[[79,[-1]]],[[28,[14]]],[18,73,42,90]],[[[79,[-1]]],[[79,[-1]]],[18,73]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,68,[]],[-1,68,[]],[[],[[79,[-1]]],[18,73]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[91,92]],[[],-1,[]],[[],-1,[91,92]],[[],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],0,0,0,0,[[],-1,[]],0,0,0,0,0,[[],-1,[91,60]],0,0,0,0,0,0,0,0,0,0,[-1,-1,1],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,1],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[28,[-2]]],29,29],[-1,-1,[]],[-1,-1,[]],[[-1,-1],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[-1,[[28,[-1]]],[]],[[-1,13],[[28,[-1]]],[18,30,31]],[[-1,-1],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[[-1,6],[[28,[-1]]],[]],[[-1,6],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[[-1,-1,-1],-1,32],[[-1,-1],-1,32],[[-1,-1],-1,32],[-1,33,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,6,[]],[-1,6,[]],[[-1,-1],-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-1,[]],[[93,38],[[40,[21,39]]]],[[94,38],[[40,[21,39]]]],[[94,38],[[40,[21,39]]]],[-1,-1,[]],[-1,[[28,[-2]]],42,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[43,[[28,[-1]]],[]],[45,[[28,[-1]]],[]],[12,[[28,[-1]]],[]],[15,[[28,[-1]]],[]],[9,[[28,[-1]]],[]],[11,[[28,[-1]]],[]],[10,[[28,[-1]]],[]],[7,[[28,[-1]]],[]],[-1,-1,[]],[[],-1,[]],[[],-1,[]],[[46,6],[[40,[-1]]],[]],[17,[[28,[-1]]],[]],[8,[[28,[-1]]],[]],[6,[[28,[-1]]],[]],[14,[[28,[-1]]],[]],[16,[[28,[-1]]],[]],[13,[[28,[-1]]],[]],[[-1,-1],-1,[]],0,[[],-1,[]],0,[-1,[[21,[14,15,10]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,52],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],0,[-1,6,[]],[-1,6,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[-1,-2,-3],[],[],[],[]],[[-1,-2,-3],21,[],[],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,30],[[],-1,[]],0,0,[[-1,13],-1,[18,30,57]],[[-1,6],-1,[]],[[-1,-2],[],[],[]],[[-1,-1],-1,[]],[[-1,9],-1,[]],0,[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,21,[]],[-1,21,[]],0,[[-1,6],-1,[]],[[-1,6],-1,[]],[-1,-1,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[21,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,-1,[]],[-1,[[28,[43]]],[]],[-1,[[28,[45]]],[]],[-1,[[28,[12]]],[]],[-1,[[28,[15]]],[]],[-1,[[28,[9]]],[]],[-1,[[28,[11]]],[]],[-1,[[28,[10]]],[]],[-1,[[28,[7]]],[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,66,[]],[-1,[[28,[17]]],[]],[-1,[[28,[8]]],[]],[-1,[[28,[6]]],[]],[-1,[[28,[14]]],[]],[-1,[[28,[16]]],[]],[-1,[[28,[13]]],[]],[-1,6,[]],[-1,6,[]],[-1,-1,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,68,[]],[-1,68,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[[-1,-1],-1,[]],[[],-1,64],[[],-1,[]],0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,0,[-1,-2,[],[]],[-1,[[28,[-2]]],29,29],[-1,[[28,[-2]]],42,[]],[43,[[28,[-1]]],[]],[45,[[28,[-1]]],[]],[12,[[28,[-1]]],[]],[15,[[28,[-1]]],[]],[9,[[28,[-1]]],[]],[11,[[28,[-1]]],[]],[10,[[28,[-1]]],[]],[7,[[28,[-1]]],[]],[17,[[28,[-1]]],[]],[8,[[28,[-1]]],[]],[6,[[28,[-1]]],[]],[14,[[28,[-1]]],[]],[16,[[28,[-1]]],[]],[13,[[28,[-1]]],[]],[-1,[[28,[43]]],[]],[-1,[[28,[45]]],[]],[-1,[[28,[12]]],[]],[-1,[[28,[15]]],[]],[-1,[[28,[9]]],[]],[-1,[[28,[11]]],[]],[-1,[[28,[10]]],[]],[-1,[[28,[7]]],[]],[-1,[[28,[17]]],[]],[-1,[[28,[8]]],[]],[-1,[[28,[6]]],[]],[-1,[[28,[14]]],[]],[-1,[[28,[16]]],[]],[-1,[[28,[13]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[91,92]],[[],-1,[]],[[],-1,[91,92]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[91,60]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,33,[]],[-1,33,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[[21,[14,15,10]]],[]],[-1,[[21,[14,15,10]]],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,9],-1,[]],[[-1,9],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[21,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,27,52],[-1,27,[]],[[],-1,30],[[],-1,[]],[-1,21,[]],[-1,21,[]],[[],-1,64],[[],-1,[]],0,[-1,6,[]],[-1,6,[]],[-1,-1,[]],[-1,-1,[]],[-1,6,[]],[-1,6,[]],[[-1,6],-1,[]],[-1,-1,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,6,[]],[-1,6,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],0,0,0,0,0,0,0,0,[[-1,-1],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[-1,[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[[-1,6],[[28,[-1]]],[]],[[-1,6],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],0,0,[[-1,-1],[[28,[-1]]],[]],[[-1,-1],[[28,[-1]]],[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,[-1,[],[]],0,0,0,[[-1,-2,-3],[],[],[],[]],[[-1,-2,-3],21,[],[],[]],0,0,0,[[-1,-1],[[21,[-1,27]]],[]],[[-1,-1],[[21,[-1,27]]],[]],[[-1,-1],[[21,[-1,27]]],[]],0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,6],-1,[]],[[-1,6],-1,[]],[[-1,-1],-1,[]],0,0,[[-1,13],[[28,[-1]]],[18,30,31]],[[-1,13],-1,[18,30,57]],[[-1,-2],[],[],[]],0,[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,27,[]],[-1,27,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,9],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[21,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-1,1],[-1,-1,[]],[[-1,-1],-1,1],[[-1,-1],-1,[]],[-1,27,[]],[-1,27,[]],[-1,-1,1],[-1,-1,[]]],"c":[17,1952],"p":[[8,"Signed",0],[3,"BigInt",0],[3,"Complex",0],[8,"Float",0],[8,"FloatConst",2239],[15,"u32"],[15,"isize"],[15,"u16"],[15,"i32"],[15,"i8"],[15,"i64"],[15,"i128"],[15,"usize"],[15,"u64"],[15,"i16"],[15,"u8"],[15,"u128"],[8,"Clone",2829],[8,"Num",0],[3,"BigUint",0],[15,"tuple"],[8,"NumAssign",2239],[8,"Copy",2830],[8,"AsPrimitive",1687],[4,"Sign",1593],[15,"slice"],[15,"bool"],[4,"Option",2831],[8,"NumCast",0],[8,"One",0],[8,"CheckedMul",0],[8,"PartialOrd",2832],[4,"FpCategory",2833],[4,"Ordering",2832],[8,"Neg",2834],[8,"Default",2835],[3,"ExtendedGcd",1781],[3,"Formatter",2836],[3,"Error",2836],[4,"Result",2837],[8,"Debug",2836],[8,"ToPrimitive",0],[15,"f32"],[8,"FromPrimitive",0],[15,"f64"],[15,"str"],[3,"ParseBigIntError",1593],[8,"FromStr",2838],[8,"Hasher",2839],[8,"Hash",2839],[8,"FloatCore",2549],[8,"PartialEq",2832],[3,"U32Digits",1593],[3,"U64Digits",1593],[3,"Global",2840],[3,"Vec",2841],[8,"Mul",2834],[8,"Iterator",2842],[3,"Range",1848],[8,"Add",2834],[3,"RangeInclusive",1848],[3,"RangeStep",1848],[8,"CheckedAdd",0],[8,"Zero",0],[3,"RangeStepInclusive",1848],[3,"String",2843],[3,"TryFromBigIntError",1593],[3,"TypeId",2844],[3,"ParseComplexError",1722],[8,"Error",2845],[8,"Display",2836],[8,"Average",1781],[8,"Integer",0],[8,"Roots",1781],[3,"IterBinomial",1781],[3,"RangeFrom",1848],[3,"RangeStepFrom",1848],[4,"Bound",2846],[3,"Ratio",1949],[8,"Bounded",0],[8,"CheckedSub",0],[3,"ParseRatioError",1949],[8,"Octal",2836],[8,"LowerHex",2836],[8,"Binary",2836],[8,"LowerExp",2836],[8,"UpperHex",2836],[8,"UpperExp",2836],[8,"Pow",1944],[8,"ToBigInt",1593],[8,"Sized",2830],[8,"Div",2834],[4,"FloatErrorKind",2239],[3,"ParseFloatError",2239],[8,"CheckedDiv",0],[8,"PrimInt",0],[8,"Saturating",0],[8,"ToBigUint",1593],[8,"ComplexFloat",1722],[6,"Complex32",1722],[6,"Complex64",1722],[8,"ToBytes",2239],[8,"FromBytes",2239],[8,"Inv",2239],[8,"MulAdd",2239],[8,"CheckedEuclid",2239],[8,"CheckedNeg",2239],[8,"CheckedRem",2239],[8,"CheckedShl",2239],[8,"CheckedShr",2239],[8,"Euclid",2239],[8,"MulAddAssign",2239],[8,"SaturatingAdd",2239],[8,"SaturatingMul",2239],[8,"SaturatingSub",2239],[8,"WrappingAdd",2239],[8,"WrappingMul",2239],[8,"WrappingNeg",2239],[8,"WrappingShl",2239],[8,"WrappingShr",2239],[8,"WrappingSub",2239],[8,"UpperBounded",2507],[8,"LowerBounded",2507],[8,"OverflowingAdd",2739],[8,"OverflowingMul",2739],[8,"OverflowingSub",2739],[8,"Real",2771]]},\
"num_bigint":{"doc":"Big Integer Types for Rust","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_mul","checked_mul","checked_mul","checked_rem_euclid","checked_rem_euclid","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_euclid","div_euclid","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_le_bytes","from_le_bytes","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_be_bytes","to_be_bytes","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero"],"q":[[0,"num_bigint"],[1246,"core::option"],[1247,"core::clone"],[1248,"core::cmp"],[1249,"core::fmt"],[1250,"core::cmp"],[1251,"core::fmt"],[1252,"core::hash"],[1253,"alloc::vec"],[1254,"core::iter::traits::iterator"],[1255,"alloc::string"],[1256,"core::any"]],"d":["A big signed integer type.","A big unsigned integer type.","","","","","A <code>Sign</code> is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","","","","","","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","","","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will …","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate <code>Sign</code> value.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given positioneturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","Returns the truncated principal square root of <code>self</code> – …","","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,16,16,0,16,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,1,1,1,14,14,14,14,1,1,14,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,24,25,14,16,20,21,1,24,25,14,16,20,21,1,1,14,14,1,1,14,1,1,14,1,14,1,1,14,1,14,1,1,14,1,14,16,20,21,1,14,1,14,16,20,21,1,14,16,24,25,14,1,14,20,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,16,20,21,1,14,16,20,21,1,1,1,1,1,1,1,14,14,14,14,14,14,16,20,20,21,21,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,25,14,14,14,14,14,14,14,14,16,20,21,1,14,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,16,1,24,25,14,16,20,21,24,25,21,1,1,14,1,14,1,1,14,1,14,1,1,14,1,14,1,14,24,25,1,14,24,25,1,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,16,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,1,16,1,14,24,25,24,25,1,14,1,1,25,1,1,14,14,1,14,1,14,1,14,16,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,24,25,1,1,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,40,1,14,41,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,16,20,21,1,14,1,14,1,1,1,14,1,14,20,21,1,14,1,14,1,14,1,14,14,1,14,1,24,25,14,14,14,14,14,14,14,14,14,16,20,21,1,24,25,14,16,20,21,1,24,25,14,16,20,21,1,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,7],1],[[1,8],1],[[1,3],1],[[1,8],1],[[1,9],1],[[1,9],1],[[1,10],1],[[1,10],1],[[1,5],1],[[1,1],1],[[1,11],1],[[1,8],1],[[1,11],1],[[1,12],1],[[1,13],1],[[1,2],1],[[1,1],1],[[1,4],1],[[1,6],1],[[1,11],1],[[1,8],1],[[1,6],1],[[1,3],1],[[1,2],1],[[1,13],1],[[1,5],1],[[1,5],1],[[1,7],1],[[1,1],1],[[1,10],1],[[1,11],1],[[1,13],1],[[1,12],1],[[1,7],1],[[1,9],1],[[1,2],1],[[1,6],1],[[1,10],1],[[1,13],1],[[1,1],1],[[1,12],1],[[1,4],1],[[1,7],1],[[1,9],1],[[1,3],1],[[1,4],1],[[1,12],1],[[14,5],14],[[14,3],14],[[14,5],14],[[14,10],14],[[14,10],14],[[14,4],14],[[14,4],14],[[14,9],14],[[14,14],14],[[14,14],14],[[14,5],14],[[14,4],14],[[14,4],14],[[14,10],14],[[14,14],14],[[14,6],14],[[14,9],14],[[14,10],14],[[14,14],14],[[14,3],14],[[14,5],14],[[14,9],14],[[14,3],14],[[14,6],14],[[14,3],14],[[14,6],14],[[14,9],14],[[14,6],14],[[1,7],15],[[1,13],15],[[1,6],15],[[1,2],15],[[1,10],15],[[1,11],15],[[1,3],15],[[1,1],15],[[1,12],15],[[1,9],15],[[1,4],15],[[1,8],15],[[1,5],15],[[1,1],15],[[14,5],15],[[14,4],15],[[14,14],15],[[14,10],15],[[14,14],15],[[14,6],15],[[14,9],15],[[14,3],15],[[1,16,[17,[3]]],15],[[14,[17,[3]]],15],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[1,10],18],[[14,10],18],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1],15],[[1,1],15],[[14,14],15],[[14,14],15],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1],15],[[1,1],15],[[14,14],15],[[14,14],15],[1,10],[14,10],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1],15],[[1,1],15],[[14,14],15],[[14,14],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[1,1],[14,14],[14,14],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[[1,1],[[19,[1]]]],[[1,1],[[19,[1]]]],[[14,14],[[19,[14]]]],[1,1],[14,14],[16,16],[20,20],[[[21,[-1]]],[[21,[-1]]],22],[[1,1],15],[[14,14],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[1,1],23],[[14,14],23],[[16,16],23],[24,5],[25,5],[14,10],[[],1],[[],14],[20,26],[[[21,[-1]]],26,27],[[1,9],1],[[1,13],1],[[1,11],1],[[1,6],1],[[1,2],1],[[1,12],1],[[1,3],1],[[1,8],1],[[1,4],1],[[1,6],1],[[1,5],1],[[1,4],1],[[1,9],1],[[1,9],1],[[1,10],1],[[1,8],1],[[1,2],1],[[1,11],1],[[1,1],1],[[1,11],1],[[1,6],1],[[1,13],1],[[1,3],1],[[1,7],1],[[1,5],1],[[1,5],1],[[1,13],1],[[1,12],1],[[1,4],1],[[1,2],1],[[1,1],1],[[1,10],1],[[1,12],1],[[1,7],1],[[1,9],1],[[1,5],1],[[1,3],1],[[1,4],1],[[1,10],1],[[1,2],1],[[1,10],1],[[1,8],1],[[1,7],1],[[1,1],1],[[1,3],1],[[1,1],1],[[1,7],1],[[1,8],1],[[1,6],1],[[1,12],1],[[1,13],1],[[1,11],1],[[14,4],14],[[14,10],14],[[14,10],14],[[14,9],14],[[14,6],14],[[14,5],14],[[14,5],14],[[14,3],14],[[14,3],14],[[14,9],14],[[14,3],14],[[14,9],14],[[14,10],14],[[14,4],14],[[14,6],14],[[14,14],14],[[14,5],14],[[14,6],14],[[14,6],14],[[14,10],14],[[14,5],14],[[14,4],14],[[14,14],14],[[14,14],14],[[14,3],14],[[14,14],14],[[14,9],14],[[14,4],14],[[1,5],15],[[1,2],15],[[1,4],15],[[1,8],15],[[1,12],15],[[1,9],15],[[1,3],15],[[1,1],15],[[1,6],15],[[1,13],15],[[1,11],15],[[1,10],15],[[1,1],15],[[1,7],15],[[14,14],15],[[14,14],15],[[14,9],15],[[14,10],15],[[14,3],15],[[14,4],15],[[14,5],15],[[14,6],15],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1],[[15,[1,1]]]],[[14,14],[[15,[14,14]]]],[[1,1],[[15,[1,1]]]],[[14,14],[[15,[14,14]]]],[[1,1],18],[[14,14],18],[[1,1],18],[[14,14],18],[[16,16],18],[[20,20],18],[[[21,[-1]],[21,[-1]]],18,28],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[1,1],[[15,[[29,[1]],1]]]],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[1,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[14,30],31],[[16,30],31],[[20,30],31],[[20,30],31],[[[21,[-1]],30],31,27],[[[21,[-1]],30],31,[]],[12,1],[7,1],[18,1],[2,1],[9,1],[4,1],[10,1],[8,1],[13,1],[11,1],[6,1],[-1,-1,[]],[14,1],[5,1],[3,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,14],[5,14],[9,14],[6,14],[4,14],[3,14],[18,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],1],[[],14],[[16,14],1],[[16,[17,[4]]],1],[[[17,[4]]],14],[[16,[17,[4]]],1],[[[17,[4]]],14],[32,[[19,[1]]]],[32,[[19,[14]]]],[8,[[19,[1]]]],[8,[[19,[14]]]],[12,[[19,[1]]]],[12,[[19,[14]]]],[[],1],[[],14],[[16,[17,[4]],3],[[19,[1]]]],[[[17,[4]],3],[[19,[14]]]],[[16,[17,[4]],3],[[19,[1]]]],[[[17,[4]],3],[[19,[14]]]],[[[17,[4]]],1],[[[17,[4]]],1],[[16,[17,[3]]],1],[[[17,[3]]],14],[26,[[33,[1,20]]]],[26,[[33,[14,20]]]],[[26,3],[[33,[1,20]]]],[[26,3],[[33,[14,20]]]],[6,[[19,[1]]]],[6,[[19,[14]]]],[10,[[19,[1]]]],[10,[[19,[14]]]],[[1,1],1],[[14,14],14],[[1,1],[[15,[1,1]]]],[[14,14],[[15,[14,14]]]],[[1,-1],15,34],[[14,-1],15,34],[[16,-1],15,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],-1,[]],[1,[[15,[16,14]]]],[1,18],[14,18],[[1,1],18],[[14,14],18],[1,18],[1,18],[14,18],[1,18],[14,18],[1,18],[1,18],[14,18],[1,24],[14,24],[1,25],[14,25],[24,[[19,[3]]]],[25,[[19,[10]]]],[[1,1],1],[[14,14],14],[24,5],[25,5],[1,14],[[1,1],1],[[14,14],14],[[1,1,1],1],[[14,14,14],14],[[1,12],1],[[1,12],1],[[1,1],1],[[1,11],1],[[1,10],1],[[1,7],1],[[1,1],1],[[1,13],1],[[1,9],1],[[1,4],1],[[1,2],1],[[1,5],1],[[1,5],1],[[1,6],1],[[1,9],1],[[1,10],1],[[1,3],1],[[1,6],1],[[1,9],1],[[1,7],1],[[1,11],1],[[1,7],1],[[1,12],1],[[1,2],1],[[1,4],1],[[1,12],1],[[1,1],1],[[1,7],1],[[1,13],1],[[1,3],1],[[1,1],1],[[1,10],1],[[1,2],1],[[1,8],1],[[1,9],1],[[1,4],1],[[1,8],1],[[1,3],1],[[1,6],1],[[1,4],1],[[1,13],1],[[1,10],1],[[1,3],1],[[1,5],1],[[1,6],1],[[1,11],1],[[1,8],1],[[1,8],1],[[1,11],1],[[1,13],1],[[1,5],1],[[1,2],1],[[14,5],14],[[14,14],14],[[14,3],14],[[14,10],14],[[14,9],14],[[14,9],14],[[14,14],14],[[14,14],14],[[14,4],14],[[14,9],14],[[14,6],14],[[14,10],14],[[14,6],14],[[14,5],14],[[14,4],14],[[14,3],14],[[14,4],14],[[14,10],14],[[14,3],14],[[14,14],14],[[14,4],14],[[14,3],14],[[14,10],14],[[14,9],14],[[14,5],14],[[14,6],14],[[14,5],14],[[14,6],14],[[16,16],16],[[1,4],15],[[1,10],15],[[1,1],15],[[1,8],15],[[1,6],15],[[1,11],15],[[1,2],15],[[1,5],15],[[1,1],15],[[1,9],15],[[1,13],15],[[1,3],15],[[1,7],15],[[1,12],15],[[14,14],15],[[14,4],15],[[14,9],15],[[14,5],15],[[14,10],15],[[14,14],15],[[14,3],15],[[14,6],15],[1,1],[1,1],[16,16],[[16,[35,[3]]],1],[[[35,[3]]],14],[24,[[19,[3]]]],[25,[[19,[10]]]],[24,19],[25,19],[[1,1],1],[[14,14],14],[1,1],[1,1],[[25,5],[[19,[10]]]],[[1,3],1],[[1,3],1],[[14,3],14],[[14,3],14],[[],1],[[],14],[[[17,[4]],3],[[19,[1]]]],[[[17,[4]],3],[[19,[14]]]],[[1,1],[[19,[23]]]],[[14,14],[[19,[23]]]],[[16,16],[[19,[23]]]],[[1,10],1],[[1,3],1],[[1,4],1],[[1,14],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,4],1],[[1,14],1],[[1,14],1],[[1,9],1],[[1,10],1],[[1,9],1],[[1,6],1],[[1,14],1],[[1,10],1],[[1,6],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,5],1],[[1,6],1],[[1,3],1],[[1,9],1],[[1,9],1],[[1,5],1],[[1,10],1],[[1,3],1],[[1,3],1],[[14,5],14],[[14,3],14],[[14,9],14],[[14,10],14],[[14,6],14],[[14,4],14],[[14,9],14],[[14,9],14],[[14,3],14],[[14,14],14],[[14,3],14],[[14,4],14],[[14,14],14],[[14,14],14],[[14,10],14],[[14,4],14],[[14,6],14],[[14,4],14],[[14,14],14],[[14,3],14],[[14,6],14],[[14,5],14],[[14,6],14],[[14,5],14],[[14,9],14],[[14,5],14],[[14,10],14],[[14,10],14],[[14,3],14],[[1,1],1],[[14,14],14],[-1,1,36],[-1,14,36],[[1,9],1],[[1,4],1],[[1,9],1],[[1,2],1],[[1,1],1],[[1,5],1],[[1,7],1],[[1,8],1],[[1,1],1],[[1,6],1],[[1,11],1],[[1,11],1],[[1,3],1],[[1,10],1],[[1,10],1],[[1,12],1],[[1,7],1],[[1,9],1],[[1,7],1],[[1,6],1],[[1,10],1],[[1,1],1],[[1,3],1],[[1,6],1],[[1,2],1],[[1,8],1],[[1,2],1],[[1,5],1],[[1,10],1],[[1,4],1],[[1,13],1],[[1,4],1],[[1,1],1],[[1,12],1],[[1,11],1],[[1,8],1],[[1,2],1],[[1,5],1],[[1,12],1],[[1,3],1],[[1,11],1],[[1,3],1],[[1,4],1],[[1,5],1],[[1,12],1],[[1,9],1],[[1,13],1],[[1,8],1],[[1,6],1],[[1,13],1],[[1,7],1],[[1,13],1],[[14,10],14],[[14,6],14],[[14,6],14],[[14,9],14],[[14,6],14],[[14,14],14],[[14,5],14],[[14,4],14],[[14,3],14],[[14,5],14],[[14,4],14],[[14,3],14],[[14,9],14],[[14,4],14],[[14,5],14],[[14,6],14],[[14,10],14],[[14,4],14],[[14,9],14],[[14,3],14],[[14,14],14],[[14,10],14],[[14,5],14],[[14,10],14],[[14,9],14],[[14,14],14],[[14,3],14],[[14,14],14],[[1,7],15],[[1,6],15],[[1,8],15],[[1,3],15],[[1,1],15],[[1,12],15],[[1,4],15],[[1,13],15],[[1,10],15],[[1,2],15],[[1,5],15],[[1,1],15],[[1,11],15],[[1,9],15],[[14,14],15],[[14,5],15],[[14,14],15],[[14,4],15],[[14,6],15],[[14,3],15],[[14,9],15],[[14,10],15],[[1,1],1],[[14,14],14],[[1,10,18],15],[[14,10,18],15],[1,15],[14,15],[1,15],[14,15],[[1,10],1],[[1,4],1],[[1,7],1],[[1,12],1],[[1,4],1],[[1,9],1],[[1,10],1],[[1,10],1],[[1,4],1],[[1,9],1],[[1,11],1],[[1,13],1],[[1,7],1],[[1,10],1],[[1,8],1],[[1,7],1],[[1,2],1],[[1,11],1],[[1,11],1],[[1,5],1],[[1,8],1],[[1,13],1],[[1,8],1],[[1,4],1],[[1,12],1],[[1,12],1],[[1,6],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,3],1],[[1,9],1],[[1,2],1],[[1,11],1],[[1,6],1],[[1,2],1],[[1,6],1],[[1,2],1],[[1,8],1],[[1,5],1],[[1,7],1],[[1,6],1],[[1,5],1],[[1,3],1],[[1,9],1],[[1,13],1],[[1,5],1],[[1,12],1],[[14,2],14],[[14,3],14],[[14,5],14],[[14,11],14],[[14,11],14],[[14,8],14],[[14,12],14],[[14,11],14],[[14,9],14],[[14,13],14],[[14,8],14],[[14,3],14],[[14,7],14],[[14,3],14],[[14,4],14],[[14,2],14],[[14,6],14],[[14,6],14],[[14,10],14],[[14,7],14],[[14,7],14],[[14,11],14],[[14,12],14],[[14,4],14],[[14,6],14],[[14,10],14],[[14,8],14],[[14,9],14],[[14,13],14],[[14,13],14],[[14,10],14],[[14,9],14],[[14,4],14],[[14,12],14],[[14,2],14],[[14,5],14],[[14,13],14],[[14,7],14],[[14,8],14],[[14,12],14],[[14,3],14],[[14,9],14],[[14,6],14],[[14,5],14],[[14,5],14],[[14,4],14],[[14,10],14],[[14,2],14],[[1,8],15],[[1,4],15],[[1,10],15],[[1,5],15],[[1,4],15],[[1,2],15],[[1,9],15],[[1,12],15],[[1,2],15],[[1,12],15],[[1,5],15],[[1,11],15],[[1,8],15],[[1,7],15],[[1,3],15],[[1,7],15],[[1,6],15],[[1,9],15],[[1,3],15],[[1,6],15],[[1,11],15],[[1,13],15],[[1,13],15],[[1,10],15],[[14,11],15],[[14,11],15],[[14,2],15],[[14,4],15],[[14,12],15],[[14,3],15],[[14,8],15],[[14,7],15],[[14,13],15],[[14,13],15],[[14,10],15],[[14,2],15],[[14,9],15],[[14,9],15],[[14,12],15],[[14,5],15],[[14,10],15],[[14,4],15],[[14,7],15],[[14,5],15],[[14,6],15],[[14,8],15],[[14,3],15],[[14,6],15],[[1,2],1],[[1,12],1],[[1,6],1],[[1,7],1],[[1,10],1],[[1,7],1],[[1,13],1],[[1,7],1],[[1,10],1],[[1,4],1],[[1,9],1],[[1,13],1],[[1,9],1],[[1,13],1],[[1,12],1],[[1,8],1],[[1,9],1],[[1,8],1],[[1,3],1],[[1,10],1],[[1,4],1],[[1,10],1],[[1,12],1],[[1,9],1],[[1,2],1],[[1,5],1],[[1,3],1],[[1,11],1],[[1,8],1],[[1,12],1],[[1,5],1],[[1,5],1],[[1,6],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,4],1],[[1,3],1],[[1,2],1],[[1,5],1],[[1,7],1],[[1,6],1],[[1,3],1],[[1,8],1],[[1,6],1],[[1,4],1],[[1,13],1],[[1,2],1],[[14,7],14],[[14,11],14],[[14,4],14],[[14,6],14],[[14,13],14],[[14,8],14],[[14,4],14],[[14,7],14],[[14,2],14],[[14,2],14],[[14,11],14],[[14,5],14],[[14,13],14],[[14,13],14],[[14,4],14],[[14,6],14],[[14,8],14],[[14,10],14],[[14,3],14],[[14,12],14],[[14,11],14],[[14,8],14],[[14,3],14],[[14,3],14],[[14,9],14],[[14,6],14],[[14,9],14],[[14,8],14],[[14,12],14],[[14,2],14],[[14,7],14],[[14,5],14],[[14,12],14],[[14,5],14],[[14,9],14],[[14,2],14],[[14,9],14],[[14,4],14],[[14,13],14],[[14,10],14],[[14,11],14],[[14,12],14],[[14,10],14],[[14,3],14],[[14,5],14],[[14,6],14],[[14,10],14],[[14,7],14],[[1,5],15],[[1,9],15],[[1,4],15],[[1,2],15],[[1,5],15],[[1,8],15],[[1,2],15],[[1,9],15],[[1,4],15],[[1,7],15],[[1,12],15],[[1,13],15],[[1,7],15],[[1,10],15],[[1,8],15],[[1,3],15],[[1,12],15],[[1,6],15],[[1,11],15],[[1,11],15],[[1,6],15],[[1,13],15],[[1,10],15],[[1,3],15],[[14,11],15],[[14,7],15],[[14,11],15],[[14,7],15],[[14,8],15],[[14,2],15],[[14,8],15],[[14,10],15],[[14,6],15],[[14,3],15],[[14,6],15],[[14,5],15],[[14,12],15],[[14,5],15],[[14,2],15],[[14,3],15],[[14,4],15],[[14,13],15],[[14,4],15],[[14,10],15],[[14,12],15],[[14,13],15],[[14,9],15],[[14,9],15],[1,16],[1,1],[24,[[15,[5,[19,[5]]]]]],[25,[[15,[5,[19,[5]]]]]],[1,1],[1,1],[14,14],[14,14],[[1,2],1],[[1,12],1],[[1,4],1],[[1,4],1],[[1,11],1],[[1,7],1],[[1,1],1],[[1,2],1],[[1,1],1],[[1,2],1],[[1,8],1],[[1,4],1],[[1,10],1],[[1,3],1],[[1,13],1],[[1,9],1],[[1,1],1],[[1,7],1],[[1,7],1],[[1,3],1],[[1,9],1],[[1,5],1],[[1,13],1],[[1,11],1],[[1,11],1],[[1,6],1],[[1,9],1],[[1,5],1],[[1,10],1],[[1,6],1],[[1,4],1],[[1,3],1],[[1,9],1],[[1,1],1],[[1,2],1],[[1,8],1],[[1,6],1],[[1,12],1],[[1,7],1],[[1,8],1],[[1,6],1],[[1,5],1],[[1,12],1],[[1,11],1],[[1,12],1],[[1,13],1],[[1,8],1],[[1,10],1],[[1,10],1],[[1,3],1],[[1,5],1],[[1,13],1],[[14,14],14],[[14,3],14],[[14,10],14],[[14,4],14],[[14,9],14],[[14,5],14],[[14,10],14],[[14,6],14],[[14,4],14],[[14,6],14],[[14,9],14],[[14,10],14],[[14,6],14],[[14,4],14],[[14,6],14],[[14,14],14],[[14,3],14],[[14,5],14],[[14,4],14],[[14,9],14],[[14,10],14],[[14,14],14],[[14,9],14],[[14,14],14],[[14,3],14],[[14,5],14],[[14,3],14],[[14,5],14],[[1,9],15],[[1,3],15],[[1,8],15],[[1,2],15],[[1,4],15],[[1,10],15],[[1,5],15],[[1,1],15],[[1,6],15],[[1,1],15],[[1,11],15],[[1,13],15],[[1,12],15],[[1,7],15],[[14,4],15],[[14,3],15],[[14,14],15],[[14,14],15],[[14,10],15],[[14,6],15],[[14,5],15],[[14,9],15],[-1,1,36],[-1,14,36],[1],[14],[-1,[[19,[1]]],[]],[1,[[19,[1]]]],[14,[[19,[1]]]],[-1,[[19,[14]]],[]],[1,[[19,[14]]]],[1,[[19,[14]]]],[14,[[19,[14]]]],[1,[[15,[16,[35,[4]]]]]],[14,[[35,[4]]]],[1,[[15,[16,[35,[4]]]]]],[14,[[35,[4]]]],[1,[[19,[37]]]],[14,[[19,[37]]]],[1,[[19,[32]]]],[14,[[19,[32]]]],[1,[[19,[8]]]],[14,[[19,[8]]]],[1,[[19,[12]]]],[14,[[19,[12]]]],[1],[14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,3],[[15,[16,[35,[4]]]]]],[[14,3],[[35,[4]]]],[[1,3],[[15,[16,[35,[4]]]]]],[[14,3],[[35,[4]]]],[1,[[35,[4]]]],[1,[[35,[4]]]],[[1,3],38],[[14,3],38],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[1,[[19,[6]]]],[14,[[19,[6]]]],[1,[[15,[16,[35,[3]]]]]],[14,[[35,[3]]]],[1,[[19,[10]]]],[14,[[19,[10]]]],[1,[[15,[16,[35,[10]]]]]],[14,[[35,[10]]]],[14,10],[1,[[19,[10]]]],[14,[[19,[10]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[1,[[33,[14,[21,[15]]]]]],[12,[[33,[14,[21,[15]]]]]],[-1,[[33,[-2]]],[],[]],[2,[[33,[14,[21,[15]]]]]],[1,[[33,[14,[21,[1]]]]]],[11,[[33,[14,[21,[15]]]]]],[7,[[33,[14,[21,[15]]]]]],[13,[[33,[14,[21,[15]]]]]],[8,[[33,[14,[21,[15]]]]]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,[[33,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[],1],[[],14]],"c":[],"p":[[3,"BigInt",0],[15,"i32"],[15,"u32"],[15,"u8"],[15,"usize"],[15,"u128"],[15,"isize"],[15,"i128"],[15,"u16"],[15,"u64"],[15,"i8"],[15,"i64"],[15,"i16"],[3,"BigUint",0],[15,"tuple"],[4,"Sign",0],[15,"slice"],[15,"bool"],[4,"Option",1246],[3,"ParseBigIntError",0],[3,"TryFromBigIntError",0],[8,"Clone",1247],[4,"Ordering",1248],[3,"U32Digits",0],[3,"U64Digits",0],[15,"str"],[8,"Debug",1249],[8,"PartialEq",1248],[3,"ExtendedGcd",1250],[3,"Formatter",1249],[6,"Result",1249],[15,"f64"],[4,"Result",1251],[8,"Hasher",1252],[3,"Vec",1253],[8,"Iterator",1254],[15,"f32"],[3,"String",1255],[3,"TypeId",1256],[8,"ToBigInt",0],[8,"ToBigUint",0]]},\
"num_complex":{"doc":"Complex numbers.","t":"DGGIDQKLKLLKLLLLLLLLLLLLLLKLLLKLLKLLKLLKLLLLLLKLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMMMLLLLLKLLKLLKLLKLLLLKLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLKLMMMKLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Complex","Complex32","Complex64","ComplexFloat","ParseComplexError","Real","abs","abs","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atanh","atanh","atanh","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cis","clone","clone_into","conj","conj","conj","cos","cos","cos","cosh","cosh","cosh","default","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","equivalent","exp","exp","exp","exp2","exp2","exp2","expf","expf","expf","fdiv","finv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","im","im","im","im","into","into","inv","inv","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_one","is_zero","l1_norm","l1_norm","l1_norm","ln","ln","ln","log","log","log","log10","log10","log10","log2","log2","log2","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powc","powf","powf","powf","powi","powi","powi","powu","product","product","re","re","re","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sin","sin","sin","sinh","sinh","sinh","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":[[0,"num_complex"],[309,"num_traits::float"],[310,"num_traits::float"],[311,"num_traits"],[312,"num_traits"],[313,"num_traits::cast"],[314,"core::ops::arith"],[315,"core::default"],[316,"core::error"],[317,"core::cmp"],[318,"core::fmt"],[319,"core::fmt"],[320,"num_traits::cast"],[321,"core::str::traits"],[322,"core::hash"],[323,"core::hash"],[324,"num_traits::ops::mul_add"],[325,"num_traits::ops::mul_add"],[326,"alloc::string"],[327,"core::any"]],"d":["A complex number in Cartesian form.","","","Generic trait for floating point complex numbers.","","The type used to represent the real coefficients of this …","Returns the absolute value of the number. See also …","","Computes the arccosine of a number. Return value is in …","","Computes the principal value of the inverse cosine of <code>self</code>.","Inverse hyperbolic cosine function.","","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","Computes the argument of the number.","","Calculate the principal Arg of self.","","Computes the arcsine of a number. Return value is in …","","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","Computes the principal value of inverse hyperbolic sine of …","","Computes the arctangent of a number. Return value is in …","","Computes the principal value of the inverse tangent of <code>self</code>…","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","","","","","","Take the cubic root of a number.","","Computes the principal value of the cube root of <code>self</code>.","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","","","Computes the complex conjugate of the number.","Returns the complex conjugate. i.e. <code>re - i im</code>","","Computes the cosine of a number (in radians).","Computes the cosine of <code>self</code>.","","Hyperbolic cosine function.","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Returns <code>2^(self)</code>.","Computes <code>2^(self)</code>.","","Returns <code>base^(self)</code>.","","Raises a floating point number to the complex power <code>self</code>.","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Convert a polar representation into a complex number.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Returns the imaginary part of the number.","","Imaginary portion of the complex number","Imaginary portion of the complex number","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","Checks if the given complex number is infinite","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","","Checks if the given complex number is NaN","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","Returns the natural logarithm of the number.","Computes the principal value of natural logarithm of <code>self</code>.","","Returns the logarithm of the number with respect to an …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","Returns the base 10 logarithm of the number.","","Computes the principal value of log base 10 of <code>self</code>.","Returns the base 2 logarithm of the number.","","Computes the principal value of log base 2 of <code>self</code>.","","","","","","","","","","","","","","","","","","","Create a new Complex","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a real power.","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to an unsigned integer power.","","","Returns the real part of the number.","","Real portion of the complex number","Real portion of the complex number","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","","Hyperbolic sine function.","Computes the hyperbolic sine of <code>self</code>.","","Take the square root of a number.","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","","Computes the tangent of a number (in radians).","","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,0,57,57,1,57,1,1,57,1,1,1,1,1,1,1,1,1,1,1,1,1,1,57,1,1,1,57,1,1,57,1,1,57,1,1,57,1,1,1,12,1,12,57,1,1,1,1,1,57,1,1,57,1,1,57,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,57,1,1,57,1,1,57,1,1,1,1,1,1,1,1,1,1,1,1,12,12,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,57,1,58,59,1,1,12,1,1,1,57,1,1,57,1,1,57,1,1,57,1,1,1,1,57,1,1,57,1,1,57,1,1,57,1,1,57,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,57,1,1,57,1,1,57,1,1,1,1,1,57,1,58,59,1,57,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,57,1,1,57,1,1,57,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,57,1,1,57,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,12,1,12,1,12,1,1],"f":[0,0,0,0,0,0,[-1,[],[]],[[[1,[-1]]],[],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],2],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[-1,[],[]],[[[1,[-1]]],[],[2,3]],[[[1,[-1]]],-1,2],[[[1,[-2]]],-1,8,[[9,[-1]]]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],2],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],2],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],2],[-1,[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],4],[[-1,-2],6,[],[]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[4,5,10]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[],[[1,[-1]]],11],[[[12,[-1]]],13,14],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]],[1,[-1]]],15,16],[[[12,[-1]],[12,[-1]]],15,16],[[-1,-2],15,[],[]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],17],18,[19,5,20,4]],[[[1,[-1]],17],18,[21,5,20,4]],[[[1,[-1]],17],18,[22,5,20,4]],[[[1,[-1]],17],18,[23,5,20,4]],[[[1,[-1]],17],18,24],[[[1,[-1]],17],18,[25,5,20,4]],[[[1,[-1]],17],18,[26,5,20,4]],[[[1,[-1]],17],18,[27,5,20,4]],[[[12,[-1]],17],18,26],[[[12,[-1]],17],18,24],[-1,[[28,[[1,[-2]]]]],29,[30,5]],[-1,-1,[]],[-1,[[1,[-1]]],[4,5]],[-1,[[1,[-1]]],[4,5]],[-1,-1,[]],[31,[[28,[[1,[-1]]]]],[32,5]],[33,[[28,[[1,[-1]]]]],[32,5]],[34,[[28,[[1,[-1]]]]],[32,5]],[35,[[28,[[1,[-1]]]]],[32,5]],[36,[[28,[[1,[-1]]]]],[32,5]],[37,[[28,[[1,[-1]]]]],[32,5]],[38,[[28,[[1,[-1]]]]],[32,5]],[39,[[28,[[1,[-1]]]]],[32,5]],[[-1,-1],[[1,[-1]]],2],[13,[[40,[[1,[-1]]]]],[41,5,4]],[[13,42],[[40,[[1,[-1]]]]],[5,4]],[43,[[28,[[1,[-1]]]]],[32,5]],[44,[[28,[[1,[-1]]]]],[32,5]],[42,[[28,[[1,[-1]]]]],[32,5]],[45,[[28,[[1,[-1]]]]],[32,5]],[46,[[28,[[1,[-1]]]]],[32,5]],[47,[[28,[[1,[-1]]]]],[32,5]],[[[1,[-1]],-2],6,48,49],[[],[[1,[-1]]],[4,5]],[-1,[],[]],[[[1,[-1]]],[],[2,3]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[],[4,5,10]],[[[1,[-1]]],[],[4,5,10]],[[[1,[-1]]],[[1,[-1]]],[4,5,10]],[-1,15,[]],[[[1,[-1]]],15,[2,3]],[[[1,[-1]]],15,50],[-1,15,[]],[[[1,[-1]]],15,50],[[[1,[-1]]],15,[2,3]],[-1,15,[]],[[[1,[-1]]],15,[2,3]],[[[1,[-1]]],15,50],[-1,15,[]],[[[1,[-1]]],15,50],[[[1,[-1]]],15,[2,3]],[[[1,[-1]]],15,[4,5]],[[[1,[-1]]],15,[4,5]],[-1,[],[]],[[[1,[-1]]],-1,[4,51]],[[[1,[-1]]],[],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],[1,[-1]],[1,[-1]]],[[1,[-1]]],[4,5,52]],[[[1,[-1]],[1,[-1]],[1,[-1]]],[[1,[-1]]],[4,5,52]],[[[1,[-1]],[1,[-1]],[1,[-1]]],6,[4,7,53]],[[[1,[-1]],[1,[-1]],[1,[-1]]],6,[4,7,53]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]]],[],[4,5,10]],[[[1,[-1]]],[],[4,5,10]],[[-1,-1],[[1,[-1]]],[]],[[[1,[-1]]],-1,2],[[[1,[-1]]],-1,[4,5]],[[],[[1,[-1]]],[4,5]],[[[1,[-1]],[1,[-1]]],[],2],[[[1,[-1]],[1,[-1]]],[],2],[[[1,[-1]],38],[],[4,5,10]],[[[1,[-1]],33],[],2],[[[1,[-1]],44],[],[4,5]],[[[1,[-1]],39],[],[4,5,10]],[[[1,[-1]],[1,[-1]]],[],2],[[[1,[-1]],31],[],2],[[[1,[-1]],36],[],[4,5,10]],[[[1,[-1]],43],[],[4,5]],[[[1,[-1]],35],[],[4,5,10]],[[[1,[-1]],46],[],[4,5]],[[[1,[-1]],37],[],[4,5,10]],[[[1,[-1]],33],[],2],[[[1,[-1]],42],[],[4,5]],[[[1,[-1]],34],[],[4,5,10]],[[[1,[-1]],[1,[-1]]],[],2],[[[1,[-1]],46],[],[4,5]],[[[1,[-1]],42],[],[4,5]],[[[1,[-1]],47],[],[4,5]],[[[1,[-1]],44],[],[4,5]],[[[1,[-1]],35],[],[4,5,10]],[[[1,[-1]],36],[],[4,5,10]],[[[1,[-1]],31],[],2],[[[1,[-1]],45],[],[4,5]],[[[1,[-1]],33],[],2],[[[1,[-1]],38],[],[4,5,10]],[[[1,[-1]],37],[],[4,5,10]],[[[1,[-1]],47],[],[4,5]],[[[1,[-1]],31],[],2],[[[1,[-1]],34],[],[4,5,10]],[[[1,[-1]],43],[],[4,5]],[[[1,[-1]],39],[],[4,5,10]],[[[1,[-1]],31],[],2],[[[1,[-1]],45],[],[4,5]],[[[1,[-1]],33],[],2],[[-1,1],1,[]],[[[1,[-1]],1],1,[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[-1,-1,[]],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[-1,36],-1,[]],[[[1,[-1]],36],[[1,[-1]]],[4,5,10]],[[[1,[-1]],36],[[1,[-1]]],[2,3]],[[[1,[-1]],42],[[1,[-1]]],[4,5]],[-1,[[1,[-2]]],54,[5,4]],[-1,[[1,[-2]]],54,[5,4]],[-1,[],[]],[[[1,[-1]]],[],[2,3]],0,0,0,[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]],-1],[[1,[-1]]],[4,5]],[[[1,[-1]]],6,[4,5]],[[[1,[-1]]],6,[4,5]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],-1],[],[4,5]],[[[1,[-1]],[1,[-1]]],[],[4,5]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],[1,[-1]]],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[[[1,[-1]],-1],6,[4,7]],[-1,[[1,[-2]]],54,[5,4]],[-1,[[1,[-2]]],54,[5,4]],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],2],[-1,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[28,[31]]],[29,5]],[[[1,[-1]]],[[28,[33]]],[29,5]],[[[1,[-1]]],[[28,[34]]],[29,5]],[[[1,[-1]]],[[28,[35]]],[29,5]],[[[1,[-1]]],[[28,[36]]],[29,5]],[[[1,[-1]]],[[28,[37]]],[29,5]],[[[1,[-1]]],[[28,[38]]],[29,5]],[[[1,[-1]]],[[28,[39]]],[29,5]],[-1,-2,[],[]],[[[1,[-1]]],[[6,[-1,-1]]],2],[-1,55,[]],[-1,55,[]],[[[1,[-1]]],[[28,[43]]],[29,5]],[[[1,[-1]]],[[28,[44]]],[29,5]],[[[1,[-1]]],[[28,[42]]],[29,5]],[[[1,[-1]]],[[28,[45]]],[29,5]],[[[1,[-1]]],[[28,[46]]],[29,5]],[[[1,[-1]]],[[28,[47]]],[29,5]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,56,[]],[-1,56,[]],[[[1,[-1]],-1],[[1,[-1]]],[4,5]],[[],[[1,[-1]]],[4,5]]],"c":[],"p":[[3,"Complex",0],[8,"Float",309],[8,"FloatConst",309],[8,"Clone",310],[8,"Num",311],[15,"tuple"],[8,"NumAssign",311],[8,"Copy",312],[8,"AsPrimitive",313],[8,"Neg",314],[8,"Default",315],[3,"ParseComplexError",0],[15,"str"],[8,"Error",316],[15,"bool"],[8,"PartialEq",317],[3,"Formatter",318],[6,"Result",318],[8,"Binary",318],[8,"PartialOrd",317],[8,"UpperExp",318],[8,"LowerHex",318],[8,"Octal",318],[8,"Debug",318],[8,"UpperHex",318],[8,"Display",318],[8,"LowerExp",318],[4,"Option",319],[8,"ToPrimitive",313],[8,"NumCast",313],[15,"f32"],[8,"FromPrimitive",313],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[4,"Result",320],[8,"FromStr",321],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash",322],[8,"Hasher",322],[8,"FloatCore",309],[8,"Signed",323],[8,"MulAdd",324],[8,"MulAddAssign",324],[8,"Iterator",325],[3,"String",326],[3,"TypeId",327],[8,"ComplexFloat",0],[6,"Complex32",0],[6,"Complex64",0]]},\
"num_integer":{"doc":"Integer trait and functions.","t":"IDIDIFKFKFLLLLFLLLLFLFKFLFKKLLLLLLLFKMFLLLLKKKFKFKFLLLFKLFLLLLLLLLLMM","n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","equivalent","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":[[0,"num_integer"],[69,"core::clone"],[70,"core::cmp"],[71,"num_traits::sign"],[72,"core::fmt"],[73,"core::fmt"],[74,"core::result"],[75,"core::any"]],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,14,5,14,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,5,2,2,5,14,5,0,2,5,0,2,14,5,14,2,2,2,0,2,0,2,0,14,14,2,0,4,2,0,4,4,5,14,5,14,5,14,5,5,5],"f":[0,0,0,0,0,[[-1,-1],-1,1],[[-1,-1],-1,[]],[[-1,-1],-1,1],[[-1,-1],-1,[]],[[-1,-1],-1,[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,4],[-1,-1,[]],[-1,-1,[]],[[[5,[-1]]],[[5,[-1]]],3],[[-1,-2],6,[],[]],[[-1,-1],-1,2],[[-1,-1],-1,[]],[[-1,-1],-1,2],[[-1,-1],-1,[]],[[-1,-1],[[6,[-1,-1]]],2],[[-1,-1],[[6,[-1,-1]]],[]],[[-1,-1],[[6,[-1,-1]]],2],[[-1,-1],[[6,[-1,-1]]],[]],[[-1,-1],7,[]],[[[5,[-1]],[5,[-1]]],7,8],[[-1,-2],7,[],[]],[[-1,-1],[[5,[-1]]],3],[[-1,-1],[[6,[[5,[-1]],-1]]],[3,9]],[[[5,[-1]],10],11,12],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,2],[[-1,-1],-1,[]],0,[[-1,-1],[[6,[-1,-1]]],2],[[-1,-1],[[6,[-1,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[[-1,-1],7,[]],[-1,7,[]],[[-1,-1],-1,2],[[-1,-1],-1,[]],[[-1,-1],-1,2],[[-1,-1],-1,[]],[[[13,[-1]]],-1,[]],[-1,[[14,[-1]]],2],[[[14,[-1]]],[[15,[-1]]],[2,3]],[[-1,-1],-1,3],[[-1,16],-1,4],[[-1,16],-1,[]],[[-1,-1],-1,3],[-1,-1,4],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],0,0],"c":[],"p":[[8,"Average",0],[8,"Integer",0],[8,"Clone",69],[8,"Roots",0],[3,"ExtendedGcd",0],[15,"tuple"],[15,"bool"],[8,"PartialEq",70],[8,"Signed",71],[3,"Formatter",72],[6,"Result",72],[8,"Debug",72],[15,"slice"],[3,"IterBinomial",0],[4,"Option",73],[15,"u32"],[4,"Result",74],[3,"TypeId",75]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":"DDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"num_iter"],[96,"core::clone"],[97,"core::ops::range"],[98,"core::option"],[99,"num_traits::ops::checked"],[100,"core::cmp"],[101,"core::cmp"],[102,"num_traits::cast"],[103,"core::ops::arith"],[104,"num_traits::identities"],[105,"num_traits::identities"],[106,"core::any"]],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,3,4,5,6,7,1,3,4,5,6,7,1,3,4,5,6,7,1,3,4,5,6,7,1,3,6,1,3,4,5,6,7,1,3,4,5,6,7,1,3,4,5,6,7,1,3,4,5,6,7,1,3,0,0,0,0,0,0,1,3,6,7,1,3,6,1,3,4,5,6,7,1,3,4,5,6,7,1,3,4,5,6,7,1,3,4,5,6,7],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],2],[[[4,[-1]]],[[4,[-1]]],2],[[[5,[-1]]],[[5,[-1]]],2],[[[6,[-1]]],[[6,[-1]]],2],[[[7,[-1]]],[[7,[-1]]],2],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[1,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[6,[-1]]],[[9,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[10,[-1]]],[]],[[[3,[-1]]],[[10,[-1]]],[]],[[[4,[-1]]],[[10,[-1]]],[11,12,2]],[[[5,[-1]]],[[10,[-1]]],[11,12,2,13]],[[[6,[-1]]],[[10,[-1]]],[]],[[[7,[-1]]],[[10,[-1]]],[]],[[[1,[-1]]],[[10,[-1]]],[14,2,15]],[[[3,[-1]]],[[10,[-1]]],[]],[[-1,-1],[[1,[-1]]],[16,12,2,17]],[-1,[[6,[-1]]],[16,2,17]],[[-1,-1],[[3,[-1]]],[16,12,2,17]],[[-1,-1,-1],[[4,[-1]]],[11,12,2,18]],[[-1,-1],[[7,[-1]]],[16,2]],[[-1,-1,-1],[[5,[-1]]],[11,12,2,18]],[[[1,[-1]]],[[8,[19,[10,[19]]]]],[]],[[[3,[-1]]],[[8,[19,[10,[19]]]]],[]],[[[6,[-1]]],[[8,[19,[10,[19]]]]],[]],[[[7,[-1]]],[[8,[19,[10,[19]]]]],[]],[[[1,[-1]]],[[9,[-1]]],[]],[[[3,[-1]]],[[9,[-1]]],[]],[[[6,[-1]]],[[9,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]]],"c":[],"p":[[3,"Range",0],[8,"Clone",96],[3,"RangeInclusive",0],[3,"RangeStep",0],[3,"RangeStepInclusive",0],[3,"RangeFrom",0],[3,"RangeStepFrom",0],[15,"tuple"],[4,"Bound",97],[4,"Option",98],[8,"CheckedAdd",99],[8,"PartialOrd",100],[8,"PartialEq",100],[8,"Integer",101],[8,"ToPrimitive",102],[8,"Add",103],[8,"One",104],[8,"Zero",104],[15,"usize"],[4,"Result",105],[3,"TypeId",106]]},\
"num_rational":{"doc":"Rational numbers","t":"GDDGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","equivalent","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":[[0,"num_rational"],[290,"core::clone"],[291,"num_integer"],[292,"num_traits::sign"],[293,"num_traits"],[294,"core::option"],[295,"num_traits::float"],[296,"num_traits::cast"],[297,"num_traits::bounds"],[298,"num_traits::ops::checked"],[299,"num_traits::ops::checked"],[300,"core::fmt"],[301,"core::fmt"],[302,"core::result"],[303,"core::str::traits"],[304,"core::hash"],[305,"core::hash"],[306,"num_traits::pow"],[307,"num_bigint::biguint"],[308,"core::iter::traits::iterator"],[309,"num_traits::cast"],[310,"core::any"]],"d":["Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,1,14,1,1,1,1,1,1,14,1,14,1,1,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,14,1,1,1,1,1,1,1,1,1,1,14,14,1,1,1,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,1,14,1,1,1,1,14,1,14,1,14,1],"f":[0,0,0,0,0,0,[[[1,[-1]]],[[1,[-1]]],[2,3,4]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3,4]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[-1,[[7,[[1,[-2]]]]],[8,9],[3,4,10,9,2]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[7,[[1,[-1]]]]],[2,3,11,12]],[[[1,[-1]],[1,[-1]]],[[7,[[1,[-1]]]]],[2,3,11]],[[[1,[-1]],[1,[-1]]],[[7,[[1,[-1]]]]],[2,3,11]],[[[1,[-1]],[1,[-1]]],[[7,[[1,[-1]]]]],[2,3,11,13]],[[[1,[-1]]],[[1,[-1]]],2],[14,14],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[1,[-1]],[1,[-1]]],15,[2,3]],[[],[[1,[-1]]],[2,3]],[[[1,[-1]]],-1,[]],[14,16],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]],[1,[-1]]],17,[2,3]],[[14,14],17],[[-1,-2],17,[],[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],18],19,[20,2,3]],[[[1,[-1]],18],19,[21,2,3]],[[[1,[-1]],18],19,[22,2,3]],[[[1,[-1]],18],19,[23,2,3]],[[[1,[-1]],18],19,24],[[[1,[-1]],18],19,[25,2,3]],[[[1,[-1]],18],19,[26,2,3]],[[[1,[-1]],18],19,[27,2,3]],[[14,18],19],[[14,18],19],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[5,[-1,-1]]],[[1,[-1]]],[2,3]],[-1,[[1,[-1]]],[2,3]],[-1,-1,[]],[-1,-1,[]],[28,[[7,[[1,[29]]]]]],[28,[[7,[[1,[30]]]]]],[28,[[7,[[1,[31]]]]]],[28,[[7,[[1,[32]]]]]],[28,[[7,[[1,[33]]]]]],[28,[[7,[[1,[34]]]]]],[28,[[7,[[1,[35]]]]]],[28,[[7,[[1,[36]]]]]],[28,[[7,[[1,[37]]]]]],[28,[[7,[[1,[38]]]]]],[28,[[7,[[1,[39]]]]]],[28,[[7,[[1,[40]]]]]],[28,[[7,[[1,[41]]]]]],[42,[[7,[[1,[35]]]]]],[42,[[7,[[1,[33]]]]]],[42,[[7,[[1,[29]]]]]],[42,[[7,[[1,[31]]]]]],[42,[[7,[[1,[30]]]]]],[42,[[7,[[1,[39]]]]]],[42,[[7,[[1,[32]]]]]],[42,[[7,[[1,[40]]]]]],[42,[[7,[[1,[36]]]]]],[42,[[7,[[1,[38]]]]]],[42,[[7,[[1,[34]]]]]],[42,[[7,[[1,[37]]]]]],[42,[[7,[[1,[41]]]]]],[-1,[[7,[43]]],8],[35,[[7,[[1,[41]]]]]],[35,[[7,[[1,[35]]]]]],[35,[[7,[[1,[33]]]]]],[35,[[7,[[1,[34]]]]]],[35,[[7,[[1,[30]]]]]],[35,[[7,[[1,[32]]]]]],[35,[[7,[[1,[40]]]]]],[35,[[7,[[1,[37]]]]]],[35,[[7,[[1,[29]]]]]],[35,[[7,[[1,[31]]]]]],[35,[[7,[[1,[38]]]]]],[35,[[7,[[1,[39]]]]]],[35,[[7,[[1,[36]]]]]],[32,[[7,[[1,[29]]]]]],[32,[[7,[[1,[38]]]]]],[32,[[7,[[1,[36]]]]]],[32,[[7,[[1,[35]]]]]],[32,[[7,[[1,[41]]]]]],[32,[[7,[[1,[40]]]]]],[32,[[7,[[1,[31]]]]]],[32,[[7,[[1,[33]]]]]],[32,[[7,[[1,[32]]]]]],[32,[[7,[[1,[37]]]]]],[32,[[7,[[1,[30]]]]]],[32,[[7,[[1,[39]]]]]],[32,[[7,[[1,[34]]]]]],[-1,[[1,[-1]]],[2,3]],[16,[[44,[[1,[-1]],14]]],[45,2,3]],[[16,30],[[44,[[1,[-1]],14]]],[2,3]],[39,[[7,[[1,[41]]]]]],[39,[[7,[[1,[34]]]]]],[39,[[7,[[1,[32]]]]]],[39,[[7,[[1,[39]]]]]],[39,[[7,[[1,[33]]]]]],[39,[[7,[[1,[30]]]]]],[39,[[7,[[1,[36]]]]]],[39,[[7,[[1,[38]]]]]],[39,[[7,[[1,[29]]]]]],[39,[[7,[[1,[35]]]]]],[39,[[7,[[1,[37]]]]]],[39,[[7,[[1,[40]]]]]],[39,[[7,[[1,[31]]]]]],[31,[[7,[[1,[39]]]]]],[31,[[7,[[1,[40]]]]]],[31,[[7,[[1,[37]]]]]],[31,[[7,[[1,[35]]]]]],[31,[[7,[[1,[31]]]]]],[31,[[7,[[1,[33]]]]]],[31,[[7,[[1,[34]]]]]],[31,[[7,[[1,[36]]]]]],[31,[[7,[[1,[29]]]]]],[31,[[7,[[1,[41]]]]]],[31,[[7,[[1,[38]]]]]],[31,[[7,[[1,[30]]]]]],[31,[[7,[[1,[32]]]]]],[[[1,[-1]],-2],5,[2,3,46],47],[-1,-2,[],[]],[[[1,[-1]]],[[5,[-1,-1]]],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],17,[2,3]],[[[1,[-1]]],17,[2,3,4]],[[[1,[-1]]],17,[2,3]],[[[1,[-1]]],17,[2,3,4]],[[[1,[-1]]],17,[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]]],[[1,[-1]]],[2,3,48]],[[[1,[-1]]],[[1,[-1]]],[2,3,48]],[[-1,-1],[[1,[-1]]],[2,3]],[[-1,-1],[[1,[-1]]],[]],[[[1,[-1]]],-1,[]],[[],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[7,[15]]],[2,3]],[[[1,[-1]],33],[[1,[-1]]],[2,3]],[[[1,[-1]],41],[[1,[-1]]],[2,3,[49,[41]]]],[[[1,[-1]],30],[[1,[-1]]],[2,3,[49,[30]]]],[[[1,[-1]],36],[[1,[-1]]],[2,3]],[[[1,[-1]],30],[[1,[-1]]],[2,3]],[[[1,[-1]],32],[[1,[-1]]],[2,3]],[[[1,[-1]],30],[[1,[-1]]],[2,3]],[[[1,[-1]],34],[[1,[-1]]],[2,3]],[[[1,[-1]],41],[[1,[-1]]],[2,3,[49,[41]]]],[[[1,[-1]],34],[[1,[-1]]],[2,3,[49,[40]]]],[[[1,[-1]],35],[[1,[-1]]],[2,3,[49,[39]]]],[[[1,[-1]],29],[[1,[-1]]],[2,3]],[[[1,[-1]],36],[[1,[-1]]],[2,3]],[[[1,[-1]],37],[[1,[-1]]],[2,3,[49,[37]]]],[[[1,[-1]],40],[[1,[-1]]],[2,3,[49,[40]]]],[[[1,[-1]],31],[[1,[-1]]],[2,3]],[[[1,[-1]],41],[[1,[-1]]],[2,3]],[[[1,[-1]],31],[[1,[-1]]],[2,3]],[[[1,[-1]],35],[[1,[-1]]],[2,3]],[[[1,[-1]],50],[[1,[-1]]],[2,3,[49,[50]]]],[[[1,[-1]],33],[[1,[-1]]],[2,3]],[[[1,[-1]],32],[[1,[-1]]],[2,3]],[[[1,[-1]],38],[[1,[-1]]],[2,3]],[[[1,[-1]],36],[[1,[-1]]],[2,3]],[[[1,[-1]],36],[[1,[-1]]],[2,3,[49,[30]]]],[[[1,[-1]],29],[[1,[-1]]],[2,3,[49,[41]]]],[[[1,[-1]],32],[[1,[-1]]],[2,3,[49,[31]]]],[[[1,[-1]],29],[[1,[-1]]],[2,3,[49,[41]]]],[[[1,[-1]],38],[[1,[-1]]],[2,3,[49,[50]]]],[[[1,[-1]],50],[[1,[-1]]],[2,3]],[[[1,[-1]],34],[[1,[-1]]],[2,3]],[[[1,[-1]],40],[[1,[-1]]],[2,3]],[[[1,[-1]],35],[[1,[-1]]],[2,3]],[[[1,[-1]],37],[[1,[-1]]],[2,3]],[[[1,[-1]],34],[[1,[-1]]],[2,3,[49,[40]]]],[[[1,[-1]],39],[[1,[-1]]],[2,3]],[[[1,[-1]],41],[[1,[-1]]],[2,3]],[[[1,[-1]],37],[[1,[-1]]],[2,3,[49,[37]]]],[[[1,[-1]],38],[[1,[-1]]],[2,3]],[[[1,[-1]],38],[[1,[-1]]],[2,3,[49,[50]]]],[[[1,[-1]],50],[[1,[-1]]],[2,3,[49,[50]]]],[[[1,[-1]],33],[[1,[-1]]],[2,3,[49,[37]]]],[[[1,[-1]],31],[[1,[-1]]],[2,3,[49,[31]]]],[[[1,[-1]],39],[[1,[-1]]],[2,3,[49,[39]]]],[[[1,[-1]],35],[[1,[-1]]],[2,3,[49,[39]]]],[[[1,[-1]],40],[[1,[-1]]],[2,3,[49,[40]]]],[[[1,[-1]],32],[[1,[-1]]],[2,3,[49,[31]]]],[[[1,[-1]],30],[[1,[-1]]],[2,3,[49,[30]]]],[[[1,[-1]],31],[[1,[-1]]],[2,3,[49,[31]]]],[[[1,[-1]],39],[[1,[-1]]],[2,3]],[[[1,[-1]],39],[[1,[-1]]],[2,3,[49,[39]]]],[[[1,[-1]],29],[[1,[-1]]],[2,3]],[[[1,[-1]],33],[[1,[-1]]],[2,3,[49,[37]]]],[[[1,[-1]],36],[[1,[-1]]],[2,3,[49,[30]]]],[[[1,[-1]],40],[[1,[-1]]],[2,3]],[[[1,[-1]],37],[[1,[-1]]],[2,3]],[[[1,[-1]],50],[[1,[-1]]],[2,3]],[-1,[[1,[-2]]],51,[3,2]],[-1,[[1,[-2]]],51,[3,2]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]]],5,[2,3]],[[[1,[-1]]],5,[2,3]],[[[1,[-1]]],[[1,[-1]]],[2,3,4]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],-1],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],[2,3]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],-1],5,[2,3,6]],[[[1,[-1]],[1,[-1]]],5,[2,3,6]],[-1,[[1,[-2]]],51,[3,2]],[-1,[[1,[-2]]],51,[3,2]],[[[1,[-1]]],[[7,[42]]],[2,3,52,53]],[[[1,[-1]]],[[7,[35]]],[2,3,52,53]],[[[1,[-1]]],[[7,[32]]],[2,3,52,53]],[[[1,[-1]]],-1,[2,3]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[-1,54,[]],[[[1,[-1]]],[[7,[39]]],[2,3,52,53]],[[[1,[-1]]],[[7,[31]]],[2,3,52,53]],[[[1,[-1]]],[[1,[-1]]],[2,3]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,55,[]],[-1,55,[]],[[],[[1,[-1]]],[2,3]]],"c":[3],"p":[[3,"Ratio",0],[8,"Clone",290],[8,"Integer",291],[8,"Signed",292],[15,"tuple"],[8,"NumAssign",293],[4,"Option",294],[8,"FloatCore",295],[8,"NumCast",296],[8,"Bounded",297],[8,"CheckedMul",298],[8,"CheckedAdd",298],[8,"CheckedSub",298],[3,"ParseRatioError",0],[4,"Ordering",299],[15,"str"],[15,"bool"],[3,"Formatter",300],[6,"Result",300],[8,"UpperExp",300],[8,"UpperHex",300],[8,"Octal",300],[8,"Binary",300],[8,"Debug",300],[8,"LowerExp",300],[8,"LowerHex",300],[8,"Display",300],[15,"f32"],[15,"i16"],[15,"u32"],[15,"u64"],[15,"i64"],[15,"isize"],[15,"i8"],[15,"i128"],[15,"i32"],[15,"usize"],[3,"BigInt",301],[15,"u128"],[15,"u8"],[15,"u16"],[15,"f64"],[6,"BigRational",0],[4,"Result",302],[8,"FromStr",303],[8,"Hash",304],[8,"Hasher",304],[8,"Neg",305],[8,"Pow",306],[3,"BigUint",307],[8,"Iterator",308],[8,"ToPrimitive",296],[8,"ToBigInt",301],[3,"String",309],[3,"TypeId",310]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[90,"num_traits::bounds"],[97,"num_traits::cast"],[132,"num_traits::float"],[243,"num_traits::identities"],[253,"num_traits::int"],[273,"num_traits::ops"],[281,"num_traits::ops::bytes"],[292,"num_traits::ops::checked"],[308,"num_traits::ops::euclid"],[314,"num_traits::ops::inv"],[317,"num_traits::ops::mul_add"],[322,"num_traits::ops::overflowing"],[328,"num_traits::ops::saturating"],[337,"num_traits::ops::wrapping"],[349,"num_traits::pow"],[354,"num_traits::real"],[402,"num_traits::sign"],[412,"core::cmp"],[413,"core::fmt"],[414,"core::fmt"],[415,"alloc::string"],[416,"core::any"],[417,"core::option"],[418,"core::marker"],[419,"core::ops::arith"],[420,"core::ops::arith"],[421,"core::cmp"],[422,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,40,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,40,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,41,42,41,43,0,0,0,0,44,0,12,45,45,45,45,45,45,45,45,45,45,45,45,45,45,13,13,13,13,13,13,13,13,13,13,13,13,13,13,46,46,46,46,46,46,46,46,46,46,0,0,0,46,46,46,46,46,46,46,46,46,47,48,47,47,47,47,47,47,47,47,47,47,48,48,47,47,47,47,48,47,47,47,47,47,48,47,48,47,48,47,48,47,47,48,47,48,47,48,47,48,47,48,47,48,48,47,47,47,47,47,47,47,48,48,47,47,48,48,47,48,47,47,48,47,48,47,48,47,47,47,48,47,48,47,48,47,48,47,47,47,47,47,47,48,47,48,47,47,48,0,0,34,35,0,34,34,35,0,35,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0,0,0,0,0,50,51,0,0,0,51,51,51,50,50,50,0,0,0,0,0,0,0,0,52,53,37,54,55,56,57,58,0,0,59,59,60,60,0,61,61,0,0,62,62,63,0,0,0,64,65,66,0,0,0,0,67,68,69,67,70,0,0,0,0,0,0,71,72,73,74,75,76,77,0,0,0,77,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,39,0,39,39,39,0,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[8,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,9,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,0,[-1,-2,[],[]],[-1,[[11,[-2]]],12,12],[-1,[[11,[-2]]],13,[]],[14,[[11,[-1]]],[]],[15,[[11,[-1]]],[]],[16,[[11,[-1]]],[]],[17,[[11,[-1]]],[]],[18,[[11,[-1]]],[]],[19,[[11,[-1]]],[]],[20,[[11,[-1]]],[]],[21,[[11,[-1]]],[]],[22,[[11,[-1]]],[]],[23,[[11,[-1]]],[]],[7,[[11,[-1]]],[]],[24,[[11,[-1]]],[]],[25,[[11,[-1]]],[]],[26,[[11,[-1]]],[]],[-1,[[11,[14]]],[]],[-1,[[11,[15]]],[]],[-1,[[11,[16]]],[]],[-1,[[11,[17]]],[]],[-1,[[11,[18]]],[]],[-1,[[11,[19]]],[]],[-1,[[11,[20]]],[]],[-1,[[11,[21]]],[]],[-1,[[11,[22]]],[]],[-1,[[11,[23]]],[]],[-1,[[11,[7]]],[]],[-1,[[11,[24]]],[]],[-1,[[11,[25]]],[]],[-1,[[11,[26]]],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[27,28]],[[],-1,[]],[[],-1,[27,28]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[27,29]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,30,[]],[-1,30,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[[31,[24,17,20]]],[]],[-1,[[31,[24,17,20]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[-1,18],-1,[]],[[-1,18],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,32,33],[-1,32,[]],[[],-1,34],[[],-1,[]],[-1,31,[]],[-1,31,[]],[[],-1,35],[[],-1,[]],0,[-1,7,[]],[-1,7,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[-1,7,[]],[[-1,7],-1,[]],[-1,-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[-1,7,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],-1,[]],[[],-1,[]],[[],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],0,0,0,0,0,0,0,0,[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[-1,[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,7],[[11,[-1]]],[]],[[-1,7],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],0,0,[[-1,-1],[[11,[-1]]],[]],[[-1,-1],[[11,[-1]]],[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,[-1,[],[]],0,0,0,[[-1,-2,-3],[],[],[],[]],[[-1,-2,-3],31,[],[],[]],0,0,0,[[-1,-1],[[31,[-1,32]]],[]],[[-1,-1],[[31,[-1,32]]],[]],[[-1,-1],[[31,[-1,32]]],[]],0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,0,0,0,0,0,[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,7],-1,[]],[[-1,7],-1,[]],[[-1,-1],-1,[]],0,0,[[-1,26],[[11,[-1]]],[36,34,37]],[[-1,26],-1,[36,34,38]],[[-1,-2],[],[],[]],0,[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,32,[]],[-1,32,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[[],-1,[]],[[-1,-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,18],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[-1,-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-1,39],[-1,-1,[]],[[-1,-1],-1,39],[[-1,-1],-1,[]],[-1,32,[]],[-1,32,[]],[-1,-1,39],[-1,-1,[]]],"c":[],"p":[[8,"PartialOrd",412],[4,"FloatErrorKind",0],[3,"Formatter",413],[6,"Result",413],[3,"ParseFloatError",0],[15,"str"],[15,"u32"],[4,"Result",414],[3,"String",415],[3,"TypeId",416],[4,"Option",417],[8,"NumCast",97],[8,"ToPrimitive",97],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized",418],[8,"Div",419],[8,"Add",419],[4,"FpCategory",420],[15,"tuple"],[15,"bool"],[8,"PartialEq",412],[8,"One",243],[8,"Zero",243],[8,"Clone",421],[8,"CheckedMul",292],[8,"Mul",419],[8,"Signed",402],[8,"Num",0],[8,"Bounded",90],[8,"UpperBounded",90],[8,"LowerBounded",90],[8,"AsPrimitive",97],[8,"FromPrimitive",97],[8,"FloatConst",132],[8,"Float",132],[8,"FloatCore",132],[8,"PrimInt",253],[8,"ToBytes",281],[8,"FromBytes",281],[8,"CheckedAdd",292],[8,"CheckedDiv",292],[8,"CheckedNeg",292],[8,"CheckedRem",292],[8,"CheckedShl",292],[8,"CheckedShr",292],[8,"CheckedSub",292],[8,"CheckedEuclid",308],[8,"Euclid",308],[8,"Inv",314],[8,"MulAdd",317],[8,"MulAddAssign",317],[8,"OverflowingAdd",322],[8,"OverflowingMul",322],[8,"OverflowingSub",322],[8,"Saturating",328],[8,"SaturatingAdd",328],[8,"SaturatingMul",328],[8,"SaturatingSub",328],[8,"WrappingAdd",337],[8,"WrappingMul",337],[8,"WrappingNeg",337],[8,"WrappingShl",337],[8,"WrappingShr",337],[8,"WrappingSub",337],[8,"Pow",349],[8,"Real",354]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[231,"proc_macro2::extra"],[246,"proc_macro2::token_stream"],[262,"core::cmp"],[263,"core::marker"],[264,"core::convert"],[265,"core::iter::traits::collect"],[266,"core::fmt"],[267,"core::fmt"],[268,"proc_macro"],[269,"core::hash"],[270,"core::option"],[271,"alloc::string"],[272,"core::ops::range"],[273,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,10,11,12,7,7,0,5,5,5,5,23,23,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,23,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,23,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,23,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,23,7,8,9,1,12,5,0,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,-1],16,[17,[19,[18]]]],[[12,12],16],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[[7,-1],13,20],[[7,-1],13,20],0,[21,5],[21,5],[22,5],[22,5],[[23,24],25],[[23,24],25],[[7,24],25],[[7,24],25],[[6,24],25],[[8,24],25],[[8,24],25],[[9,24],25],[[9,24],25],[[10,24],25],[[1,24],25],[[1,24],25],[[11,24],25],[[12,24],25],[[12,24],25],[[5,24],25],[[5,24],25],[-1,-1,[]],[-1,-1,[]],[26,7],[8,7],[27,6],[-1,-1,[]],[12,8],[9,8],[5,8],[1,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,20],[-1,7,20],[18,[[28,[7,23]]]],[18,[[28,[5,23]]]],[[12,-1],13,29],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,35],[7,16],[36,5],[36,5],[[6,6],[[37,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[37,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[37,[38]]]],[1,11],[23,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[37,[6]]],[[40,[39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,27],[39,5],[39,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,24],25],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],13,[],[]],[[35,24],25],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[37,[8]]]],[35,[[13,[39,[37,[39]]]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",262],[3,"DelimSpan",231],[15,"bool"],[8,"Sized",263],[15,"str"],[8,"AsRef",264],[8,"IntoIterator",265],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",266],[6,"Result",266],[3,"TokenStream",267],[3,"Span",267],[4,"Result",268],[8,"Hasher",269],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",246],[15,"isize"],[4,"Option",270],[3,"String",271],[15,"usize"],[8,"RangeBounds",272],[3,"TypeId",273],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]]},\
"thiserror":{"doc":"github crates-io docs-rs","t":"Y","n":["Error"],"q":[[0,"thiserror"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"thiserror_impl":{"doc":"","t":"Y","n":["Error"],"q":[[0,"thiserror_impl"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
